// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking-service/booking_service.proto

package booking_service

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetPatientRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPatientRequest) Reset()         { *m = GetPatientRequest{} }
func (m *GetPatientRequest) String() string { return proto.CompactTextString(m) }
func (*GetPatientRequest) ProtoMessage()    {}
func (*GetPatientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{0}
}
func (m *GetPatientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPatientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPatientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPatientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPatientRequest.Merge(m, src)
}
func (m *GetPatientRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPatientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPatientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPatientRequest proto.InternalMessageInfo

func (m *GetPatientRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPatientsRequest struct {
	Limit                string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit"`
	Page                 string   `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPatientsRequest) Reset()         { *m = GetPatientsRequest{} }
func (m *GetPatientsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPatientsRequest) ProtoMessage()    {}
func (*GetPatientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{1}
}
func (m *GetPatientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPatientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPatientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPatientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPatientsRequest.Merge(m, src)
}
func (m *GetPatientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPatientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPatientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPatientsRequest proto.InternalMessageInfo

func (m *GetPatientsRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *GetPatientsRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type UpdatePatientRequest struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Patient              *PatientUpdate `protobuf:"bytes,2,opt,name=patient,proto3" json:"patient"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdatePatientRequest) Reset()         { *m = UpdatePatientRequest{} }
func (m *UpdatePatientRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePatientRequest) ProtoMessage()    {}
func (*UpdatePatientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{2}
}
func (m *UpdatePatientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePatientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePatientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePatientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePatientRequest.Merge(m, src)
}
func (m *UpdatePatientRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePatientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePatientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePatientRequest proto.InternalMessageInfo

func (m *UpdatePatientRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePatientRequest) GetPatient() *PatientUpdate {
	if m != nil {
		return m.Patient
	}
	return nil
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Patients struct {
	Patient              []*Patient `protobuf:"bytes,1,rep,name=patient,proto3" json:"patient"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Patients) Reset()         { *m = Patients{} }
func (m *Patients) String() string { return proto.CompactTextString(m) }
func (*Patients) ProtoMessage()    {}
func (*Patients) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{4}
}
func (m *Patients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patients.Merge(m, src)
}
func (m *Patients) XXX_Size() int {
	return m.Size()
}
func (m *Patients) XXX_DiscardUnknown() {
	xxx_messageInfo_Patients.DiscardUnknown(m)
}

var xxx_messageInfo_Patients proto.InternalMessageInfo

func (m *Patients) GetPatient() []*Patient {
	if m != nil {
		return m.Patient
	}
	return nil
}

type CreatePatientReq struct {
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	City                 string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	PhoneNumber          string   `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePatientReq) Reset()         { *m = CreatePatientReq{} }
func (m *CreatePatientReq) String() string { return proto.CompactTextString(m) }
func (*CreatePatientReq) ProtoMessage()    {}
func (*CreatePatientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{5}
}
func (m *CreatePatientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePatientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePatientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePatientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePatientReq.Merge(m, src)
}
func (m *CreatePatientReq) XXX_Size() int {
	return m.Size()
}
func (m *CreatePatientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePatientReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePatientReq proto.InternalMessageInfo

func (m *CreatePatientReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreatePatientReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreatePatientReq) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *CreatePatientReq) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *CreatePatientReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreatePatientReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type Patient struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	City                 string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	PhoneNumber          string   `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	CreateAt             string   `protobuf:"bytes,8,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,9,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Patient) Reset()         { *m = Patient{} }
func (m *Patient) String() string { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()    {}
func (*Patient) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{6}
}
func (m *Patient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patient.Merge(m, src)
}
func (m *Patient) XXX_Size() int {
	return m.Size()
}
func (m *Patient) XXX_DiscardUnknown() {
	xxx_messageInfo_Patient.DiscardUnknown(m)
}

var xxx_messageInfo_Patient proto.InternalMessageInfo

func (m *Patient) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Patient) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Patient) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Patient) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Patient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Patient) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Patient) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Patient) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Patient) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type PatientUpdate struct {
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	City                 string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	PhoneNumber          string   `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatientUpdate) Reset()         { *m = PatientUpdate{} }
func (m *PatientUpdate) String() string { return proto.CompactTextString(m) }
func (*PatientUpdate) ProtoMessage()    {}
func (*PatientUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{7}
}
func (m *PatientUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatientUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatientUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatientUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatientUpdate.Merge(m, src)
}
func (m *PatientUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PatientUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PatientUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PatientUpdate proto.InternalMessageInfo

func (m *PatientUpdate) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PatientUpdate) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *PatientUpdate) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *PatientUpdate) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *PatientUpdate) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *PatientUpdate) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

// DOCTOR'S AVAILABILiITY
// -------------------------------------------------------------
type CreateDoctorAvailabilitys struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DepartmentId         string   `protobuf:"bytes,3,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	AvailabilityDate     string   `protobuf:"bytes,4,opt,name=availability_date,json=availabilityDate,proto3" json:"availability_date"`
	AvailabilityTime     string   `protobuf:"bytes,5,opt,name=availability_time,json=availabilityTime,proto3" json:"availability_time"`
	Status               bool     `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDoctorAvailabilitys) Reset()         { *m = CreateDoctorAvailabilitys{} }
func (m *CreateDoctorAvailabilitys) String() string { return proto.CompactTextString(m) }
func (*CreateDoctorAvailabilitys) ProtoMessage()    {}
func (*CreateDoctorAvailabilitys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{8}
}
func (m *CreateDoctorAvailabilitys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDoctorAvailabilitys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDoctorAvailabilitys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDoctorAvailabilitys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDoctorAvailabilitys.Merge(m, src)
}
func (m *CreateDoctorAvailabilitys) XXX_Size() int {
	return m.Size()
}
func (m *CreateDoctorAvailabilitys) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDoctorAvailabilitys.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDoctorAvailabilitys proto.InternalMessageInfo

func (m *CreateDoctorAvailabilitys) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateDoctorAvailabilitys) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateDoctorAvailabilitys) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateDoctorAvailabilitys) GetAvailabilityDate() string {
	if m != nil {
		return m.AvailabilityDate
	}
	return ""
}

func (m *CreateDoctorAvailabilitys) GetAvailabilityTime() string {
	if m != nil {
		return m.AvailabilityTime
	}
	return ""
}

func (m *CreateDoctorAvailabilitys) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DoctorAvailabilitys struct {
	DoctorAvailability   []*DoctorAvailability `protobuf:"bytes,1,rep,name=doctor_availability,json=doctorAvailability,proto3" json:"doctor_availability"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DoctorAvailabilitys) Reset()         { *m = DoctorAvailabilitys{} }
func (m *DoctorAvailabilitys) String() string { return proto.CompactTextString(m) }
func (*DoctorAvailabilitys) ProtoMessage()    {}
func (*DoctorAvailabilitys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{9}
}
func (m *DoctorAvailabilitys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorAvailabilitys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorAvailabilitys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorAvailabilitys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorAvailabilitys.Merge(m, src)
}
func (m *DoctorAvailabilitys) XXX_Size() int {
	return m.Size()
}
func (m *DoctorAvailabilitys) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorAvailabilitys.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorAvailabilitys proto.InternalMessageInfo

func (m *DoctorAvailabilitys) GetDoctorAvailability() []*DoctorAvailability {
	if m != nil {
		return m.DoctorAvailability
	}
	return nil
}

type GetDoctorAvailabilityById struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDoctorAvailabilityById) Reset()         { *m = GetDoctorAvailabilityById{} }
func (m *GetDoctorAvailabilityById) String() string { return proto.CompactTextString(m) }
func (*GetDoctorAvailabilityById) ProtoMessage()    {}
func (*GetDoctorAvailabilityById) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{10}
}
func (m *GetDoctorAvailabilityById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoctorAvailabilityById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoctorAvailabilityById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoctorAvailabilityById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoctorAvailabilityById.Merge(m, src)
}
func (m *GetDoctorAvailabilityById) XXX_Size() int {
	return m.Size()
}
func (m *GetDoctorAvailabilityById) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoctorAvailabilityById.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoctorAvailabilityById proto.InternalMessageInfo

func (m *GetDoctorAvailabilityById) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateDoctorAvailabilityById struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DoctorAvailability   *UpdDoctorAvailability `protobuf:"bytes,2,opt,name=doctor_availability,json=doctorAvailability,proto3" json:"doctor_availability"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateDoctorAvailabilityById) Reset()         { *m = UpdateDoctorAvailabilityById{} }
func (m *UpdateDoctorAvailabilityById) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorAvailabilityById) ProtoMessage()    {}
func (*UpdateDoctorAvailabilityById) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{11}
}
func (m *UpdateDoctorAvailabilityById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorAvailabilityById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorAvailabilityById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorAvailabilityById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorAvailabilityById.Merge(m, src)
}
func (m *UpdateDoctorAvailabilityById) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorAvailabilityById) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorAvailabilityById.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorAvailabilityById proto.InternalMessageInfo

func (m *UpdateDoctorAvailabilityById) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDoctorAvailabilityById) GetDoctorAvailability() *UpdDoctorAvailability {
	if m != nil {
		return m.DoctorAvailability
	}
	return nil
}

type UpdDoctorAvailability struct {
	AvailabilityDate     string   `protobuf:"bytes,1,opt,name=availability_date,json=availabilityDate,proto3" json:"availability_date"`
	AvailabilityTime     string   `protobuf:"bytes,2,opt,name=availability_time,json=availabilityTime,proto3" json:"availability_time"`
	Status               bool     `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdDoctorAvailability) Reset()         { *m = UpdDoctorAvailability{} }
func (m *UpdDoctorAvailability) String() string { return proto.CompactTextString(m) }
func (*UpdDoctorAvailability) ProtoMessage()    {}
func (*UpdDoctorAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{12}
}
func (m *UpdDoctorAvailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdDoctorAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdDoctorAvailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdDoctorAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdDoctorAvailability.Merge(m, src)
}
func (m *UpdDoctorAvailability) XXX_Size() int {
	return m.Size()
}
func (m *UpdDoctorAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdDoctorAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_UpdDoctorAvailability proto.InternalMessageInfo

func (m *UpdDoctorAvailability) GetAvailabilityDate() string {
	if m != nil {
		return m.AvailabilityDate
	}
	return ""
}

func (m *UpdDoctorAvailability) GetAvailabilityTime() string {
	if m != nil {
		return m.AvailabilityTime
	}
	return ""
}

func (m *UpdDoctorAvailability) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DoctorAvailability struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DepartmentId         string   `protobuf:"bytes,3,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	AvailabilityDate     string   `protobuf:"bytes,4,opt,name=availability_date,json=availabilityDate,proto3" json:"availability_date"`
	AvailabilityTime     string   `protobuf:"bytes,5,opt,name=availability_time,json=availabilityTime,proto3" json:"availability_time"`
	Status               bool     `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	CreateAt             string   `protobuf:"bytes,7,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,8,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorAvailability) Reset()         { *m = DoctorAvailability{} }
func (m *DoctorAvailability) String() string { return proto.CompactTextString(m) }
func (*DoctorAvailability) ProtoMessage()    {}
func (*DoctorAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{13}
}
func (m *DoctorAvailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorAvailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorAvailability.Merge(m, src)
}
func (m *DoctorAvailability) XXX_Size() int {
	return m.Size()
}
func (m *DoctorAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorAvailability proto.InternalMessageInfo

func (m *DoctorAvailability) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DoctorAvailability) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorAvailability) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *DoctorAvailability) GetAvailabilityDate() string {
	if m != nil {
		return m.AvailabilityDate
	}
	return ""
}

func (m *DoctorAvailability) GetAvailabilityTime() string {
	if m != nil {
		return m.AvailabilityTime
	}
	return ""
}

func (m *DoctorAvailability) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *DoctorAvailability) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *DoctorAvailability) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type CreateBookedAppointments struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Type                 string   `protobuf:"bytes,7,opt,name=type,proto3" json:"type"`
	Duration             string   `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration"`
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	Token                string   `protobuf:"bytes,10,opt,name=token,proto3" json:"token"`
	PatientStatus        bool     `protobuf:"varint,11,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	Status               string   `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBookedAppointments) Reset()         { *m = CreateBookedAppointments{} }
func (m *CreateBookedAppointments) String() string { return proto.CompactTextString(m) }
func (*CreateBookedAppointments) ProtoMessage()    {}
func (*CreateBookedAppointments) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{14}
}
func (m *CreateBookedAppointments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBookedAppointments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBookedAppointments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBookedAppointments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBookedAppointments.Merge(m, src)
}
func (m *CreateBookedAppointments) XXX_Size() int {
	return m.Size()
}
func (m *CreateBookedAppointments) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBookedAppointments.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBookedAppointments proto.InternalMessageInfo

func (m *CreateBookedAppointments) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateBookedAppointments) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateBookedAppointments) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateBookedAppointments) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateBookedAppointments) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *CreateBookedAppointments) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *CreateBookedAppointments) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateBookedAppointments) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *CreateBookedAppointments) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *CreateBookedAppointments) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CreateBookedAppointments) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *CreateBookedAppointments) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type BookedAppointment struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Type                 string   `protobuf:"bytes,7,opt,name=type,proto3" json:"type"`
	Duration             string   `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration"`
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	Token                string   `protobuf:"bytes,10,opt,name=token,proto3" json:"token"`
	PatientStatus        bool     `protobuf:"varint,11,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	Status               string   `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`
	CreateAt             string   `protobuf:"bytes,13,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,14,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookedAppointment) Reset()         { *m = BookedAppointment{} }
func (m *BookedAppointment) String() string { return proto.CompactTextString(m) }
func (*BookedAppointment) ProtoMessage()    {}
func (*BookedAppointment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{15}
}
func (m *BookedAppointment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookedAppointment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookedAppointment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookedAppointment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookedAppointment.Merge(m, src)
}
func (m *BookedAppointment) XXX_Size() int {
	return m.Size()
}
func (m *BookedAppointment) XXX_DiscardUnknown() {
	xxx_messageInfo_BookedAppointment.DiscardUnknown(m)
}

var xxx_messageInfo_BookedAppointment proto.InternalMessageInfo

func (m *BookedAppointment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BookedAppointment) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *BookedAppointment) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *BookedAppointment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *BookedAppointment) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *BookedAppointment) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *BookedAppointment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BookedAppointment) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *BookedAppointment) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *BookedAppointment) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BookedAppointment) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *BookedAppointment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BookedAppointment) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *BookedAppointment) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type GetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{16}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdRequest struct {
	Token                string                   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	BookedAppointment    *UpdateBookedAppointment `protobuf:"bytes,2,opt,name=booked_appointment,json=bookedAppointment,proto3" json:"booked_appointment"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdRequest) Reset()         { *m = UpdRequest{} }
func (m *UpdRequest) String() string { return proto.CompactTextString(m) }
func (*UpdRequest) ProtoMessage()    {}
func (*UpdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{17}
}
func (m *UpdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdRequest.Merge(m, src)
}
func (m *UpdRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdRequest proto.InternalMessageInfo

func (m *UpdRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdRequest) GetBookedAppointment() *UpdateBookedAppointment {
	if m != nil {
		return m.BookedAppointment
	}
	return nil
}

type UpdateBookedAppointment struct {
	AppointmentDate      string   `protobuf:"bytes,1,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,2,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	Duration             string   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration"`
	ExpiresAt            string   `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	Token                string   `protobuf:"bytes,6,opt,name=token,proto3" json:"token"`
	PatientStatus        bool     `protobuf:"varint,7,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	Status               string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBookedAppointment) Reset()         { *m = UpdateBookedAppointment{} }
func (m *UpdateBookedAppointment) String() string { return proto.CompactTextString(m) }
func (*UpdateBookedAppointment) ProtoMessage()    {}
func (*UpdateBookedAppointment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{18}
}
func (m *UpdateBookedAppointment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBookedAppointment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBookedAppointment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBookedAppointment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBookedAppointment.Merge(m, src)
}
func (m *UpdateBookedAppointment) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBookedAppointment) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBookedAppointment.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBookedAppointment proto.InternalMessageInfo

func (m *UpdateBookedAppointment) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *UpdateBookedAppointment) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *UpdateBookedAppointment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateBookedAppointment) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *UpdateBookedAppointment) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *UpdateBookedAppointment) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdateBookedAppointment) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *UpdateBookedAppointment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type UpdateBookedAppointmentRequest struct {
	Id                   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	BookedAppointment    *UpdateBookedAppointment `protobuf:"bytes,2,opt,name=booked_appointment,json=bookedAppointment,proto3" json:"booked_appointment"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdateBookedAppointmentRequest) Reset()         { *m = UpdateBookedAppointmentRequest{} }
func (m *UpdateBookedAppointmentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBookedAppointmentRequest) ProtoMessage()    {}
func (*UpdateBookedAppointmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{19}
}
func (m *UpdateBookedAppointmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBookedAppointmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBookedAppointmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBookedAppointmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBookedAppointmentRequest.Merge(m, src)
}
func (m *UpdateBookedAppointmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBookedAppointmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBookedAppointmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBookedAppointmentRequest proto.InternalMessageInfo

func (m *UpdateBookedAppointmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateBookedAppointmentRequest) GetBookedAppointment() *UpdateBookedAppointment {
	if m != nil {
		return m.BookedAppointment
	}
	return nil
}

type GetBookedAppointments struct {
	BookedAppointments   []*BookedAppointment `protobuf:"bytes,1,rep,name=booked_appointments,json=bookedAppointments,proto3" json:"booked_appointments"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetBookedAppointments) Reset()         { *m = GetBookedAppointments{} }
func (m *GetBookedAppointments) String() string { return proto.CompactTextString(m) }
func (*GetBookedAppointments) ProtoMessage()    {}
func (*GetBookedAppointments) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{20}
}
func (m *GetBookedAppointments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBookedAppointments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBookedAppointments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBookedAppointments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBookedAppointments.Merge(m, src)
}
func (m *GetBookedAppointments) XXX_Size() int {
	return m.Size()
}
func (m *GetBookedAppointments) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBookedAppointments.DiscardUnknown(m)
}

var xxx_messageInfo_GetBookedAppointments proto.InternalMessageInfo

func (m *GetBookedAppointments) GetBookedAppointments() []*BookedAppointment {
	if m != nil {
		return m.BookedAppointments
	}
	return nil
}

type PatientPayment struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AppointmentId        string   `protobuf:"bytes,2,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	PatientId            string   `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Amount               float32  `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount"`
	Status               string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	Ispaid               bool     `protobuf:"varint,7,opt,name=ispaid,proto3" json:"ispaid"`
	CreateAt             string   `protobuf:"bytes,8,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,9,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatientPayment) Reset()         { *m = PatientPayment{} }
func (m *PatientPayment) String() string { return proto.CompactTextString(m) }
func (*PatientPayment) ProtoMessage()    {}
func (*PatientPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{21}
}
func (m *PatientPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatientPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatientPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatientPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatientPayment.Merge(m, src)
}
func (m *PatientPayment) XXX_Size() int {
	return m.Size()
}
func (m *PatientPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_PatientPayment.DiscardUnknown(m)
}

var xxx_messageInfo_PatientPayment proto.InternalMessageInfo

func (m *PatientPayment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PatientPayment) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *PatientPayment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *PatientPayment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PatientPayment) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PatientPayment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PatientPayment) GetIspaid() bool {
	if m != nil {
		return m.Ispaid
	}
	return false
}

func (m *PatientPayment) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *PatientPayment) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type GetPaymentsResp struct {
	PatientPayment       []*PatientPayment `protobuf:"bytes,1,rep,name=patient_payment,json=patientPayment,proto3" json:"patient_payment"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPaymentsResp) Reset()         { *m = GetPaymentsResp{} }
func (m *GetPaymentsResp) String() string { return proto.CompactTextString(m) }
func (*GetPaymentsResp) ProtoMessage()    {}
func (*GetPaymentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{22}
}
func (m *GetPaymentsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentsResp.Merge(m, src)
}
func (m *GetPaymentsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentsResp proto.InternalMessageInfo

func (m *GetPaymentsResp) GetPatientPayment() []*PatientPayment {
	if m != nil {
		return m.PatientPayment
	}
	return nil
}

type GetPaymentReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPaymentReq) Reset()         { *m = GetPaymentReq{} }
func (m *GetPaymentReq) String() string { return proto.CompactTextString(m) }
func (*GetPaymentReq) ProtoMessage()    {}
func (*GetPaymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{23}
}
func (m *GetPaymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentReq.Merge(m, src)
}
func (m *GetPaymentReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentReq proto.InternalMessageInfo

func (m *GetPaymentReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdatePaymentRequest struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Payment              *PatientPayment `protobuf:"bytes,2,opt,name=payment,proto3" json:"payment"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdatePaymentRequest) Reset()         { *m = UpdatePaymentRequest{} }
func (m *UpdatePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePaymentRequest) ProtoMessage()    {}
func (*UpdatePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{24}
}
func (m *UpdatePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePaymentRequest.Merge(m, src)
}
func (m *UpdatePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePaymentRequest proto.InternalMessageInfo

func (m *UpdatePaymentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePaymentRequest) GetPayment() *PatientPayment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type CreateArchiveReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	PatientToken         string   `protobuf:"bytes,5,opt,name=patient_token,json=patientToken,proto3" json:"patient_token"`
	PatientProblem       string   `protobuf:"bytes,6,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	ConsultationType     string   `protobuf:"bytes,7,opt,name=consultation_type,json=consultationType,proto3" json:"consultation_type"`
	BookedDate           string   `protobuf:"bytes,8,opt,name=booked_date,json=bookedDate,proto3" json:"booked_date"`
	BookedTime           string   `protobuf:"bytes,9,opt,name=booked_time,json=bookedTime,proto3" json:"booked_time"`
	AppointmentId        string   `protobuf:"bytes,10,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	Status               string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status"`
	VisitsCount          int32    `protobuf:"varint,12,opt,name=visits_count,json=visitsCount,proto3" json:"visits_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateArchiveReq) Reset()         { *m = CreateArchiveReq{} }
func (m *CreateArchiveReq) String() string { return proto.CompactTextString(m) }
func (*CreateArchiveReq) ProtoMessage()    {}
func (*CreateArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{25}
}
func (m *CreateArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateArchiveReq.Merge(m, src)
}
func (m *CreateArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateArchiveReq proto.InternalMessageInfo

func (m *CreateArchiveReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateArchiveReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateArchiveReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateArchiveReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateArchiveReq) GetPatientToken() string {
	if m != nil {
		return m.PatientToken
	}
	return ""
}

func (m *CreateArchiveReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *CreateArchiveReq) GetConsultationType() string {
	if m != nil {
		return m.ConsultationType
	}
	return ""
}

func (m *CreateArchiveReq) GetBookedDate() string {
	if m != nil {
		return m.BookedDate
	}
	return ""
}

func (m *CreateArchiveReq) GetBookedTime() string {
	if m != nil {
		return m.BookedTime
	}
	return ""
}

func (m *CreateArchiveReq) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *CreateArchiveReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreateArchiveReq) GetVisitsCount() int32 {
	if m != nil {
		return m.VisitsCount
	}
	return 0
}

type Archive struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	PatientToken         string   `protobuf:"bytes,5,opt,name=patient_token,json=patientToken,proto3" json:"patient_token"`
	PatientProblem       string   `protobuf:"bytes,6,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	ConsultationType     string   `protobuf:"bytes,7,opt,name=consultation_type,json=consultationType,proto3" json:"consultation_type"`
	BookedDate           string   `protobuf:"bytes,8,opt,name=booked_date,json=bookedDate,proto3" json:"booked_date"`
	BookedTime           string   `protobuf:"bytes,9,opt,name=booked_time,json=bookedTime,proto3" json:"booked_time"`
	AppointmentId        string   `protobuf:"bytes,10,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	Status               string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status"`
	VisitsCount          int32    `protobuf:"varint,12,opt,name=visits_count,json=visitsCount,proto3" json:"visits_count"`
	CreateAt             string   `protobuf:"bytes,13,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,14,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Archive) Reset()         { *m = Archive{} }
func (m *Archive) String() string { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()    {}
func (*Archive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{26}
}
func (m *Archive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archive.Merge(m, src)
}
func (m *Archive) XXX_Size() int {
	return m.Size()
}
func (m *Archive) XXX_DiscardUnknown() {
	xxx_messageInfo_Archive.DiscardUnknown(m)
}

var xxx_messageInfo_Archive proto.InternalMessageInfo

func (m *Archive) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Archive) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *Archive) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *Archive) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Archive) GetPatientToken() string {
	if m != nil {
		return m.PatientToken
	}
	return ""
}

func (m *Archive) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *Archive) GetConsultationType() string {
	if m != nil {
		return m.ConsultationType
	}
	return ""
}

func (m *Archive) GetBookedDate() string {
	if m != nil {
		return m.BookedDate
	}
	return ""
}

func (m *Archive) GetBookedTime() string {
	if m != nil {
		return m.BookedTime
	}
	return ""
}

func (m *Archive) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *Archive) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Archive) GetVisitsCount() int32 {
	if m != nil {
		return m.VisitsCount
	}
	return 0
}

func (m *Archive) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Archive) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type UpdArchive struct {
	PatientToken         string   `protobuf:"bytes,1,opt,name=patient_token,json=patientToken,proto3" json:"patient_token"`
	PatientProblem       string   `protobuf:"bytes,2,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	ConsultationType     string   `protobuf:"bytes,3,opt,name=consultation_type,json=consultationType,proto3" json:"consultation_type"`
	BookedDate           string   `protobuf:"bytes,4,opt,name=booked_date,json=bookedDate,proto3" json:"booked_date"`
	BookedTime           string   `protobuf:"bytes,5,opt,name=booked_time,json=bookedTime,proto3" json:"booked_time"`
	AppointmentId        string   `protobuf:"bytes,6,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	Status               string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	VisitsCount          int32    `protobuf:"varint,8,opt,name=visits_count,json=visitsCount,proto3" json:"visits_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdArchive) Reset()         { *m = UpdArchive{} }
func (m *UpdArchive) String() string { return proto.CompactTextString(m) }
func (*UpdArchive) ProtoMessage()    {}
func (*UpdArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{27}
}
func (m *UpdArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdArchive.Merge(m, src)
}
func (m *UpdArchive) XXX_Size() int {
	return m.Size()
}
func (m *UpdArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdArchive.DiscardUnknown(m)
}

var xxx_messageInfo_UpdArchive proto.InternalMessageInfo

func (m *UpdArchive) GetPatientToken() string {
	if m != nil {
		return m.PatientToken
	}
	return ""
}

func (m *UpdArchive) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *UpdArchive) GetConsultationType() string {
	if m != nil {
		return m.ConsultationType
	}
	return ""
}

func (m *UpdArchive) GetBookedDate() string {
	if m != nil {
		return m.BookedDate
	}
	return ""
}

func (m *UpdArchive) GetBookedTime() string {
	if m != nil {
		return m.BookedTime
	}
	return ""
}

func (m *UpdArchive) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *UpdArchive) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdArchive) GetVisitsCount() int32 {
	if m != nil {
		return m.VisitsCount
	}
	return 0
}

type GetArchiveReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArchiveReq) Reset()         { *m = GetArchiveReq{} }
func (m *GetArchiveReq) String() string { return proto.CompactTextString(m) }
func (*GetArchiveReq) ProtoMessage()    {}
func (*GetArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{28}
}
func (m *GetArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchiveReq.Merge(m, src)
}
func (m *GetArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *GetArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchiveReq proto.InternalMessageInfo

func (m *GetArchiveReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Archives struct {
	Archives             []*Archive `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Archives) Reset()         { *m = Archives{} }
func (m *Archives) String() string { return proto.CompactTextString(m) }
func (*Archives) ProtoMessage()    {}
func (*Archives) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{29}
}
func (m *Archives) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archives) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archives.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archives) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archives.Merge(m, src)
}
func (m *Archives) XXX_Size() int {
	return m.Size()
}
func (m *Archives) XXX_DiscardUnknown() {
	xxx_messageInfo_Archives.DiscardUnknown(m)
}

var xxx_messageInfo_Archives proto.InternalMessageInfo

func (m *Archives) GetArchives() []*Archive {
	if m != nil {
		return m.Archives
	}
	return nil
}

type UpdateArchiveRequest struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Archive              *UpdArchive `protobuf:"bytes,2,opt,name=archive,proto3" json:"archive"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateArchiveRequest) Reset()         { *m = UpdateArchiveRequest{} }
func (m *UpdateArchiveRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateArchiveRequest) ProtoMessage()    {}
func (*UpdateArchiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{30}
}
func (m *UpdateArchiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateArchiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateArchiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateArchiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArchiveRequest.Merge(m, src)
}
func (m *UpdateArchiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateArchiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArchiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArchiveRequest proto.InternalMessageInfo

func (m *UpdateArchiveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateArchiveRequest) GetArchive() *UpdArchive {
	if m != nil {
		return m.Archive
	}
	return nil
}

type CreateUploadedFile struct {
	FileId               string   `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	PatientId            string   `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id"`
	File                 []byte   `protobuf:"bytes,4,opt,name=file,proto3" json:"file"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUploadedFile) Reset()         { *m = CreateUploadedFile{} }
func (m *CreateUploadedFile) String() string { return proto.CompactTextString(m) }
func (*CreateUploadedFile) ProtoMessage()    {}
func (*CreateUploadedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{31}
}
func (m *CreateUploadedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUploadedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUploadedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUploadedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUploadedFile.Merge(m, src)
}
func (m *CreateUploadedFile) XXX_Size() int {
	return m.Size()
}
func (m *CreateUploadedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUploadedFile.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUploadedFile proto.InternalMessageInfo

func (m *CreateUploadedFile) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *CreateUploadedFile) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateUploadedFile) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CreateUploadedFile) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type UploadedFile struct {
	FileId               string   `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	PatientId            string   `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id"`
	File                 []byte   `protobuf:"bytes,5,opt,name=file,proto3" json:"file"`
	CreateAt             string   `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,7,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadedFile) Reset()         { *m = UploadedFile{} }
func (m *UploadedFile) String() string { return proto.CompactTextString(m) }
func (*UploadedFile) ProtoMessage()    {}
func (*UploadedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{32}
}
func (m *UploadedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadedFile.Merge(m, src)
}
func (m *UploadedFile) XXX_Size() int {
	return m.Size()
}
func (m *UploadedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadedFile.DiscardUnknown(m)
}

var xxx_messageInfo_UploadedFile proto.InternalMessageInfo

func (m *UploadedFile) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *UploadedFile) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *UploadedFile) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *UploadedFile) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadedFile) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *UploadedFile) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type UploadedFiles struct {
	Uploaded             []*UploadedFile `protobuf:"bytes,1,rep,name=uploaded,proto3" json:"uploaded"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UploadedFiles) Reset()         { *m = UploadedFiles{} }
func (m *UploadedFiles) String() string { return proto.CompactTextString(m) }
func (*UploadedFiles) ProtoMessage()    {}
func (*UploadedFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{33}
}
func (m *UploadedFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadedFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadedFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadedFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadedFiles.Merge(m, src)
}
func (m *UploadedFiles) XXX_Size() int {
	return m.Size()
}
func (m *UploadedFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadedFiles.DiscardUnknown(m)
}

var xxx_messageInfo_UploadedFiles proto.InternalMessageInfo

func (m *UploadedFiles) GetUploaded() []*UploadedFile {
	if m != nil {
		return m.Uploaded
	}
	return nil
}

type GetFileRequest struct {
	FileId               string   `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFileRequest) Reset()         { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()    {}
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{34}
}
func (m *GetFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileRequest.Merge(m, src)
}
func (m *GetFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileRequest proto.InternalMessageInfo

func (m *GetFileRequest) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

type UpdUploadedFile struct {
	File                 []byte   `protobuf:"bytes,1,opt,name=file,proto3" json:"file"`
	UpdateAt             string   `protobuf:"bytes,2,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdUploadedFile) Reset()         { *m = UpdUploadedFile{} }
func (m *UpdUploadedFile) String() string { return proto.CompactTextString(m) }
func (*UpdUploadedFile) ProtoMessage()    {}
func (*UpdUploadedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{35}
}
func (m *UpdUploadedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdUploadedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdUploadedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdUploadedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdUploadedFile.Merge(m, src)
}
func (m *UpdUploadedFile) XXX_Size() int {
	return m.Size()
}
func (m *UpdUploadedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdUploadedFile.DiscardUnknown(m)
}

var xxx_messageInfo_UpdUploadedFile proto.InternalMessageInfo

func (m *UpdUploadedFile) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UpdUploadedFile) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type UpdateFileRequest struct {
	PatientId            string           `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	UploadedFile         *UpdUploadedFile `protobuf:"bytes,2,opt,name=uploaded_file,json=uploadedFile,proto3" json:"uploaded_file"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateFileRequest) Reset()         { *m = UpdateFileRequest{} }
func (m *UpdateFileRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateFileRequest) ProtoMessage()    {}
func (*UpdateFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{36}
}
func (m *UpdateFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFileRequest.Merge(m, src)
}
func (m *UpdateFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFileRequest proto.InternalMessageInfo

func (m *UpdateFileRequest) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *UpdateFileRequest) GetUploadedFile() *UpdUploadedFile {
	if m != nil {
		return m.UploadedFile
	}
	return nil
}

// DOCTOR NOTES
// -------------------------------------------------------------
type CreateDoctorNoteReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AppointmentId        string   `protobuf:"bytes,2,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	NoteType             string   `protobuf:"bytes,5,opt,name=note_type,json=noteType,proto3" json:"note_type"`
	NoteText             string   `protobuf:"bytes,6,opt,name=note_text,json=noteText,proto3" json:"note_text"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDoctorNoteReq) Reset()         { *m = CreateDoctorNoteReq{} }
func (m *CreateDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*CreateDoctorNoteReq) ProtoMessage()    {}
func (*CreateDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{37}
}
func (m *CreateDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDoctorNoteReq.Merge(m, src)
}
func (m *CreateDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDoctorNoteReq proto.InternalMessageInfo

func (m *CreateDoctorNoteReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetNoteType() string {
	if m != nil {
		return m.NoteType
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetNoteText() string {
	if m != nil {
		return m.NoteText
	}
	return ""
}

type DoctorNote struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AppointmentId        string   `protobuf:"bytes,2,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	NoteType             string   `protobuf:"bytes,5,opt,name=note_type,json=noteType,proto3" json:"note_type"`
	NoteText             string   `protobuf:"bytes,6,opt,name=note_text,json=noteText,proto3" json:"note_text"`
	CreateAt             string   `protobuf:"bytes,7,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	UpdateAt             string   `protobuf:"bytes,8,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorNote) Reset()         { *m = DoctorNote{} }
func (m *DoctorNote) String() string { return proto.CompactTextString(m) }
func (*DoctorNote) ProtoMessage()    {}
func (*DoctorNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{38}
}
func (m *DoctorNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNote.Merge(m, src)
}
func (m *DoctorNote) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNote) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNote.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNote proto.InternalMessageInfo

func (m *DoctorNote) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DoctorNote) GetAppointmentId() string {
	if m != nil {
		return m.AppointmentId
	}
	return ""
}

func (m *DoctorNote) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorNote) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *DoctorNote) GetNoteType() string {
	if m != nil {
		return m.NoteType
	}
	return ""
}

func (m *DoctorNote) GetNoteText() string {
	if m != nil {
		return m.NoteText
	}
	return ""
}

func (m *DoctorNote) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *DoctorNote) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

type DoctorNotes struct {
	DoctorNote           []*DoctorNote `protobuf:"bytes,1,rep,name=doctor_note,json=doctorNote,proto3" json:"doctor_note"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DoctorNotes) Reset()         { *m = DoctorNotes{} }
func (m *DoctorNotes) String() string { return proto.CompactTextString(m) }
func (*DoctorNotes) ProtoMessage()    {}
func (*DoctorNotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{39}
}
func (m *DoctorNotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNotes.Merge(m, src)
}
func (m *DoctorNotes) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNotes) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNotes.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNotes proto.InternalMessageInfo

func (m *DoctorNotes) GetDoctorNote() []*DoctorNote {
	if m != nil {
		return m.DoctorNote
	}
	return nil
}

type GetDoctorNoteReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDoctorNoteReq) Reset()         { *m = GetDoctorNoteReq{} }
func (m *GetDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*GetDoctorNoteReq) ProtoMessage()    {}
func (*GetDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{40}
}
func (m *GetDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoctorNoteReq.Merge(m, src)
}
func (m *GetDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoctorNoteReq proto.InternalMessageInfo

func (m *GetDoctorNoteReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdDoctorNote struct {
	NoteType             string   `protobuf:"bytes,5,opt,name=note_type,json=noteType,proto3" json:"note_type"`
	NoteText             string   `protobuf:"bytes,6,opt,name=note_text,json=noteText,proto3" json:"note_text"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdDoctorNote) Reset()         { *m = UpdDoctorNote{} }
func (m *UpdDoctorNote) String() string { return proto.CompactTextString(m) }
func (*UpdDoctorNote) ProtoMessage()    {}
func (*UpdDoctorNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{41}
}
func (m *UpdDoctorNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdDoctorNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdDoctorNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdDoctorNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdDoctorNote.Merge(m, src)
}
func (m *UpdDoctorNote) XXX_Size() int {
	return m.Size()
}
func (m *UpdDoctorNote) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdDoctorNote.DiscardUnknown(m)
}

var xxx_messageInfo_UpdDoctorNote proto.InternalMessageInfo

func (m *UpdDoctorNote) GetNoteType() string {
	if m != nil {
		return m.NoteType
	}
	return ""
}

func (m *UpdDoctorNote) GetNoteText() string {
	if m != nil {
		return m.NoteText
	}
	return ""
}

type UpdateDoctorNoteReq struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DoctorNote           *UpdDoctorNote `protobuf:"bytes,2,opt,name=doctor_note,json=doctorNote,proto3" json:"doctor_note"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateDoctorNoteReq) Reset()         { *m = UpdateDoctorNoteReq{} }
func (m *UpdateDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorNoteReq) ProtoMessage()    {}
func (*UpdateDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88f1b71b7ab32dc, []int{42}
}
func (m *UpdateDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorNoteReq.Merge(m, src)
}
func (m *UpdateDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorNoteReq proto.InternalMessageInfo

func (m *UpdateDoctorNoteReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetDoctorNote() *UpdDoctorNote {
	if m != nil {
		return m.DoctorNote
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPatientRequest)(nil), "booking_service.GetPatientRequest")
	proto.RegisterType((*GetPatientsRequest)(nil), "booking_service.GetPatientsRequest")
	proto.RegisterType((*UpdatePatientRequest)(nil), "booking_service.UpdatePatientRequest")
	proto.RegisterType((*Status)(nil), "booking_service.Status")
	proto.RegisterType((*Patients)(nil), "booking_service.Patients")
	proto.RegisterType((*CreatePatientReq)(nil), "booking_service.CreatePatientReq")
	proto.RegisterType((*Patient)(nil), "booking_service.Patient")
	proto.RegisterType((*PatientUpdate)(nil), "booking_service.PatientUpdate")
	proto.RegisterType((*CreateDoctorAvailabilitys)(nil), "booking_service.CreateDoctorAvailabilitys")
	proto.RegisterType((*DoctorAvailabilitys)(nil), "booking_service.DoctorAvailabilitys")
	proto.RegisterType((*GetDoctorAvailabilityById)(nil), "booking_service.GetDoctorAvailabilityById")
	proto.RegisterType((*UpdateDoctorAvailabilityById)(nil), "booking_service.UpdateDoctorAvailabilityById")
	proto.RegisterType((*UpdDoctorAvailability)(nil), "booking_service.UpdDoctorAvailability")
	proto.RegisterType((*DoctorAvailability)(nil), "booking_service.DoctorAvailability")
	proto.RegisterType((*CreateBookedAppointments)(nil), "booking_service.CreateBookedAppointments")
	proto.RegisterType((*BookedAppointment)(nil), "booking_service.BookedAppointment")
	proto.RegisterType((*GetRequest)(nil), "booking_service.GetRequest")
	proto.RegisterType((*UpdRequest)(nil), "booking_service.UpdRequest")
	proto.RegisterType((*UpdateBookedAppointment)(nil), "booking_service.UpdateBookedAppointment")
	proto.RegisterType((*UpdateBookedAppointmentRequest)(nil), "booking_service.UpdateBookedAppointmentRequest")
	proto.RegisterType((*GetBookedAppointments)(nil), "booking_service.GetBookedAppointments")
	proto.RegisterType((*PatientPayment)(nil), "booking_service.PatientPayment")
	proto.RegisterType((*GetPaymentsResp)(nil), "booking_service.GetPaymentsResp")
	proto.RegisterType((*GetPaymentReq)(nil), "booking_service.GetPaymentReq")
	proto.RegisterType((*UpdatePaymentRequest)(nil), "booking_service.UpdatePaymentRequest")
	proto.RegisterType((*CreateArchiveReq)(nil), "booking_service.CreateArchiveReq")
	proto.RegisterType((*Archive)(nil), "booking_service.Archive")
	proto.RegisterType((*UpdArchive)(nil), "booking_service.UpdArchive")
	proto.RegisterType((*GetArchiveReq)(nil), "booking_service.GetArchiveReq")
	proto.RegisterType((*Archives)(nil), "booking_service.Archives")
	proto.RegisterType((*UpdateArchiveRequest)(nil), "booking_service.UpdateArchiveRequest")
	proto.RegisterType((*CreateUploadedFile)(nil), "booking_service.CreateUploadedFile")
	proto.RegisterType((*UploadedFile)(nil), "booking_service.UploadedFile")
	proto.RegisterType((*UploadedFiles)(nil), "booking_service.UploadedFiles")
	proto.RegisterType((*GetFileRequest)(nil), "booking_service.GetFileRequest")
	proto.RegisterType((*UpdUploadedFile)(nil), "booking_service.UpdUploadedFile")
	proto.RegisterType((*UpdateFileRequest)(nil), "booking_service.UpdateFileRequest")
	proto.RegisterType((*CreateDoctorNoteReq)(nil), "booking_service.CreateDoctorNoteReq")
	proto.RegisterType((*DoctorNote)(nil), "booking_service.DoctorNote")
	proto.RegisterType((*DoctorNotes)(nil), "booking_service.DoctorNotes")
	proto.RegisterType((*GetDoctorNoteReq)(nil), "booking_service.GetDoctorNoteReq")
	proto.RegisterType((*UpdDoctorNote)(nil), "booking_service.UpdDoctorNote")
	proto.RegisterType((*UpdateDoctorNoteReq)(nil), "booking_service.UpdateDoctorNoteReq")
}

func init() {
	proto.RegisterFile("booking-service/booking_service.proto", fileDescriptor_f88f1b71b7ab32dc)
}

var fileDescriptor_f88f1b71b7ab32dc = []byte{
	// 2055 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0xa7, 0xdd, 0x8e, 0x3f, 0x9e, 0xed, 0x7c, 0x54, 0x66, 0x26, 0x8e, 0x33, 0x71, 0x92, 0xce,
	0xce, 0x32, 0xc3, 0x6a, 0x77, 0xa5, 0x00, 0x12, 0x2b, 0xa1, 0x85, 0x64, 0xc2, 0x64, 0xb3, 0xec,
	0x7c, 0xc8, 0x93, 0x30, 0x82, 0xd5, 0xca, 0xb4, 0xd3, 0x95, 0xa4, 0x15, 0xdb, 0xdd, 0xb8, 0xcb,
	0xd1, 0x58, 0x1c, 0x38, 0x21, 0xb4, 0x37, 0x04, 0x07, 0x38, 0x73, 0x45, 0xe2, 0x82, 0x90, 0x16,
	0x09, 0x09, 0x89, 0x13, 0x27, 0x84, 0xc4, 0x1f, 0x00, 0x1a, 0xfe, 0x04, 0xae, 0x20, 0xa1, 0xae,
	0x0f, 0x77, 0x75, 0x77, 0x55, 0xbb, 0x43, 0x58, 0xc4, 0xac, 0xe6, 0xd6, 0xfd, 0xaa, 0xfa, 0x7d,
	0xfd, 0xde, 0x7b, 0x55, 0xef, 0xd9, 0x70, 0xa7, 0xe7, 0x79, 0x17, 0xee, 0xf0, 0xec, 0xcd, 0x00,
	0x8f, 0x2e, 0xdd, 0x13, 0xfc, 0x36, 0x7f, 0xef, 0xf2, 0xf7, 0xb7, 0xfc, 0x91, 0x47, 0x3c, 0xb4,
	0x90, 0x20, 0x5b, 0xdb, 0xb0, 0x74, 0x80, 0xc9, 0x13, 0x9b, 0xb8, 0x78, 0x48, 0x3a, 0xf8, 0x7b,
	0x63, 0x1c, 0x10, 0x34, 0x0f, 0x05, 0xd7, 0x69, 0x1a, 0x9b, 0xc6, 0xdd, 0x6a, 0xa7, 0xe0, 0x3a,
	0xd6, 0xbb, 0x80, 0xa2, 0x4d, 0x81, 0xd8, 0x75, 0x03, 0xe6, 0xfa, 0xee, 0xc0, 0x25, 0x7c, 0x23,
	0x7b, 0x41, 0x08, 0x8a, 0xbe, 0x7d, 0x86, 0x9b, 0x05, 0x4a, 0xa4, 0xcf, 0xd6, 0x77, 0xe1, 0xc6,
	0xb1, 0xef, 0xd8, 0x04, 0x67, 0xcb, 0x41, 0x5f, 0x81, 0xb2, 0xcf, 0x76, 0xd0, 0xcf, 0x6b, 0x3b,
	0xed, 0xb7, 0x92, 0x66, 0x70, 0x0e, 0x8c, 0x5d, 0x47, 0x6c, 0xb7, 0x36, 0xa1, 0xf4, 0x94, 0xd8,
	0x64, 0x1c, 0xa0, 0x5b, 0x50, 0x0a, 0xe8, 0x13, 0xe5, 0x5b, 0xe9, 0xf0, 0x37, 0xeb, 0x5d, 0xa8,
	0x08, 0x03, 0xd0, 0x4e, 0x24, 0xc7, 0xd8, 0x34, 0xef, 0xd6, 0x76, 0x9a, 0x3a, 0x39, 0x91, 0x84,
	0xdf, 0x19, 0xb0, 0x78, 0x7f, 0x84, 0x63, 0x46, 0xa0, 0x75, 0x80, 0x53, 0x77, 0x14, 0x90, 0xee,
	0xd0, 0x1e, 0x08, 0x93, 0xab, 0x94, 0xf2, 0xc8, 0x1e, 0x60, 0xb4, 0x06, 0xd5, 0xbe, 0x2d, 0x56,
	0x4d, 0xba, 0x5a, 0x09, 0x09, 0x74, 0x71, 0x1d, 0xa0, 0xe7, 0x8e, 0xc8, 0x79, 0x37, 0xb4, 0xa4,
	0x59, 0x64, 0xdf, 0x52, 0xca, 0xbe, 0x4d, 0x70, 0x68, 0xc7, 0x19, 0x1e, 0x3a, 0x78, 0xd4, 0x9c,
	0xa3, 0x4b, 0xfc, 0x2d, 0xf4, 0xef, 0x89, 0x4b, 0x26, 0xcd, 0x12, 0xf3, 0x6f, 0xf8, 0x8c, 0xb6,
	0xa0, 0xee, 0x9f, 0x7b, 0x43, 0xdc, 0x1d, 0x8e, 0x07, 0x3d, 0x3c, 0x6a, 0x96, 0xe9, 0x5a, 0x8d,
	0xd2, 0x1e, 0x51, 0x92, 0xf5, 0x2f, 0x03, 0xca, 0x5c, 0xf1, 0x94, 0xdb, 0x5f, 0x1a, 0x2b, 0x42,
	0x55, 0x4e, 0x28, 0x06, 0x5d, 0x9b, 0x34, 0x2b, 0x4c, 0x15, 0x46, 0xd8, 0x25, 0xe1, 0xe2, 0x98,
	0x86, 0x45, 0xb8, 0x58, 0x65, 0x8b, 0x8c, 0xb0, 0x4b, 0xac, 0xdf, 0x1a, 0xd0, 0x88, 0xc5, 0xce,
	0x4b, 0x84, 0xdd, 0x5f, 0x0d, 0x58, 0x65, 0xa1, 0xb7, 0xef, 0x9d, 0x10, 0x6f, 0xb4, 0x7b, 0x69,
	0xbb, 0x7d, 0xbb, 0xe7, 0xf6, 0x5d, 0x32, 0x09, 0x52, 0x68, 0xae, 0x41, 0xd5, 0xa1, 0xdb, 0xba,
	0xae, 0xc3, 0xcd, 0xaa, 0x30, 0xc2, 0xa1, 0x83, 0xb6, 0xa1, 0xe1, 0x60, 0xdf, 0x1e, 0x91, 0x01,
	0x1e, 0x92, 0x70, 0x03, 0xb3, 0xac, 0x1e, 0x11, 0x0f, 0x1d, 0xf4, 0x06, 0x2c, 0xd9, 0x92, 0x08,
	0xd9, 0xc8, 0x45, 0x79, 0x81, 0xda, 0x9a, 0xdc, 0x4c, 0xdc, 0x01, 0xe6, 0x66, 0xc7, 0x36, 0x1f,
	0xb9, 0x03, 0x2c, 0x25, 0x67, 0x29, 0x96, 0x9c, 0x17, 0xb0, 0xac, 0x32, 0xed, 0x08, 0x96, 0xb9,
	0x29, 0x32, 0x27, 0x9e, 0xb3, 0xdb, 0xa9, 0x9c, 0x4d, 0xb3, 0xe8, 0x20, 0x27, 0x45, 0xb3, 0xde,
	0x80, 0xd5, 0x03, 0x4c, 0xd2, 0x9b, 0xf7, 0x26, 0x87, 0x4e, 0xaa, 0xf4, 0xfd, 0xc8, 0x80, 0xdb,
	0x2c, 0x60, 0xf2, 0x7d, 0x80, 0x9e, 0xa9, 0x75, 0x66, 0xf5, 0xec, 0xf5, 0x94, 0xce, 0xc7, 0xbe,
	0x93, 0x53, 0xed, 0x8f, 0x0d, 0xb8, 0xa9, 0xdc, 0xad, 0xc6, 0xcb, 0xb8, 0x0a, 0x5e, 0x85, 0x99,
	0x78, 0x99, 0x31, 0xbc, 0x7e, 0x52, 0x00, 0xa4, 0x50, 0xe4, 0x33, 0x10, 0x8a, 0xf1, 0x12, 0x53,
	0xce, 0x2a, 0x31, 0x95, 0x44, 0x89, 0xf9, 0xa1, 0x09, 0x4d, 0x96, 0xa6, 0x7b, 0x9e, 0x77, 0x81,
	0x9d, 0x5d, 0xdf, 0xf7, 0xdc, 0x21, 0xb5, 0x24, 0x9d, 0xa5, 0x29, 0xeb, 0x0b, 0x0a, 0xeb, 0x63,
	0xfe, 0x33, 0x13, 0xfe, 0x5b, 0x07, 0xe0, 0x67, 0x53, 0xb8, 0xca, 0x6b, 0x10, 0xa7, 0x1c, 0x3a,
	0xe8, 0x1e, 0x2c, 0xda, 0x91, 0x02, 0xcc, 0x71, 0xcc, 0x17, 0x0b, 0x12, 0x9d, 0xfa, 0x2d, 0xb1,
	0x95, 0xba, 0xad, 0x94, 0xda, 0x4a, 0xbd, 0x86, 0xa0, 0x48, 0x26, 0x3e, 0xe6, 0x8e, 0xa1, 0xcf,
	0xa8, 0x05, 0x15, 0x67, 0x3c, 0xb2, 0x89, 0xeb, 0x0d, 0x85, 0x4f, 0xc4, 0x7b, 0xa8, 0x24, 0x7e,
	0xee, 0xbb, 0x23, 0x1c, 0x44, 0x45, 0xb9, 0xca, 0x29, 0xbb, 0xf4, 0x0a, 0x41, 0xbc, 0x0b, 0x3c,
	0x6c, 0x02, 0xbb, 0x42, 0xd0, 0x17, 0x74, 0x07, 0xe6, 0x85, 0x65, 0x1c, 0xa2, 0x1a, 0x85, 0xa8,
	0xc1, 0xa9, 0xa9, 0x93, 0xbe, 0xce, 0xaa, 0x2c, 0x0f, 0xce, 0x4f, 0x4c, 0x58, 0x4a, 0x21, 0xf0,
	0x0a, 0x80, 0xff, 0x19, 0x00, 0xf1, 0x14, 0x6a, 0x64, 0xa5, 0xd0, 0x7c, 0x22, 0x85, 0x6e, 0x03,
	0x1c, 0x60, 0xed, 0x35, 0xf4, 0xfb, 0x00, 0xc7, 0xbe, 0x23, 0x5d, 0x3f, 0x99, 0xea, 0x86, 0xac,
	0xfa, 0x33, 0x40, 0x3d, 0x8a, 0x7d, 0x57, 0xf2, 0x1c, 0xaf, 0xbe, 0x77, 0x55, 0xd5, 0x57, 0x95,
	0xae, 0x9d, 0xa5, 0x5e, 0x92, 0x64, 0xfd, 0xb4, 0x00, 0x2b, 0x9a, 0xed, 0x4a, 0xa8, 0x8d, 0xfc,
	0x50, 0x17, 0xb2, 0xa1, 0x36, 0x35, 0x50, 0x17, 0x33, 0xa1, 0x9e, 0xd3, 0x42, 0x5d, 0xca, 0x86,
	0xba, 0x9c, 0x0d, 0x75, 0x25, 0x96, 0x6b, 0x1f, 0x1b, 0xd0, 0xd6, 0x39, 0x51, 0x73, 0xc9, 0xff,
	0xd4, 0x10, 0xea, 0xc3, 0xcd, 0x03, 0x4c, 0x14, 0xb5, 0xf7, 0x29, 0x2c, 0xa7, 0x25, 0x06, 0xfc,
	0x1a, 0x61, 0xa5, 0x44, 0xa6, 0x85, 0xa1, 0x94, 0xb0, 0xc0, 0xfa, 0xa7, 0x01, 0xf3, 0xfc, 0x42,
	0xf9, 0xc4, 0x9e, 0x28, 0x4b, 0xcc, 0x1d, 0x98, 0x97, 0xb1, 0x9e, 0xd6, 0x98, 0x86, 0x44, 0x4d,
	0xd5, 0x11, 0x33, 0x59, 0x47, 0x44, 0x18, 0x14, 0xa5, 0x30, 0xb8, 0x05, 0x25, 0x7b, 0xe0, 0x8d,
	0x87, 0x0c, 0xe6, 0x42, 0x87, 0xbf, 0x25, 0x0e, 0xb5, 0x28, 0x23, 0x6f, 0x41, 0xc9, 0x0d, 0x7c,
	0xdb, 0x75, 0x38, 0xba, 0xfc, 0xed, 0x1a, 0xf7, 0xe9, 0x0f, 0x61, 0x81, 0xb6, 0x84, 0xd4, 0xf2,
	0xa0, 0x83, 0x03, 0x1f, 0xbd, 0x07, 0x0b, 0xc2, 0x0e, 0x9f, 0xd1, 0xb9, 0x8b, 0x37, 0x74, 0xdd,
	0x15, 0xff, 0xbc, 0x23, 0x42, 0x90, 0xbf, 0x5b, 0x1b, 0xd0, 0x88, 0x98, 0x87, 0x7d, 0x56, 0xb2,
	0x12, 0xd8, 0x51, 0x43, 0x39, 0xc9, 0x8a, 0xb5, 0x77, 0xc2, 0x46, 0x6f, 0x22, 0x05, 0xd8, 0x4c,
	0x55, 0xc4, 0x7e, 0xeb, 0x17, 0xa6, 0xe8, 0xf7, 0x76, 0x47, 0x27, 0xe7, 0xee, 0x25, 0x56, 0xe8,
	0xf1, 0xe9, 0x1f, 0x22, 0xdb, 0x20, 0x12, 0xb1, 0xcb, 0x92, 0x97, 0xa5, 0x75, 0x9d, 0x13, 0x8f,
	0x68, 0x0e, 0x7f, 0x5e, 0x72, 0xfc, 0xc8, 0xeb, 0xf5, 0xf1, 0x80, 0xc3, 0x3f, 0xf5, 0x2b, 0xa3,
	0x86, 0x17, 0xa4, 0x13, 0x6f, 0x18, 0x8c, 0xfb, 0x84, 0x56, 0x8c, 0xae, 0x74, 0x92, 0x2c, 0xca,
	0x0b, 0x47, 0x61, 0x8c, 0x6d, 0x40, 0x8d, 0x67, 0x0d, 0xad, 0x67, 0x2c, 0x3a, 0x80, 0x91, 0x68,
	0x29, 0x8b, 0x36, 0xd0, 0x2a, 0x56, 0x95, 0x37, 0xd0, 0x02, 0x96, 0x8e, 0x7f, 0x50, 0xc5, 0x7f,
	0x14, 0xb4, 0xb5, 0x58, 0xd0, 0x6e, 0x41, 0xfd, 0xd2, 0x0d, 0x5c, 0x12, 0x74, 0x4f, 0x68, 0xa8,
	0x87, 0x87, 0xcc, 0x5c, 0xa7, 0xc6, 0x68, 0xf7, 0x43, 0x92, 0xf5, 0x17, 0x13, 0xca, 0x1c, 0x9e,
	0x57, 0xd8, 0xfc, 0x7f, 0x61, 0x73, 0x8d, 0x5b, 0xc0, 0x2f, 0x0b, 0xf4, 0xa0, 0x17, 0xc0, 0xa6,
	0xfc, 0x6c, 0xe4, 0xf3, 0x73, 0x21, 0xbf, 0x9f, 0xcd, 0x7c, 0x7e, 0x2e, 0xce, 0xf2, 0xf3, 0x5c,
	0x0e, 0x3f, 0x97, 0xb2, 0xfd, 0x5c, 0xce, 0xf4, 0x73, 0x25, 0x9d, 0x03, 0xac, 0x58, 0xea, 0x8b,
	0x94, 0xf5, 0x75, 0xa8, 0xf0, 0xd5, 0x00, 0x7d, 0x09, 0x2a, 0x36, 0x7f, 0xd6, 0x8e, 0xbe, 0x04,
	0xab, 0xe9, 0x4e, 0xeb, 0x23, 0x51, 0x6e, 0x23, 0x29, 0xca, 0x72, 0xfb, 0x65, 0x28, 0xf3, 0x6f,
	0x78, 0xb9, 0x5d, 0x53, 0x9d, 0xe7, 0x82, 0x89, 0xd8, 0x6b, 0xfd, 0x00, 0x10, 0xab, 0xb4, 0xc7,
	0x7e, 0xdf, 0xb3, 0x1d, 0xec, 0x3c, 0x70, 0xfb, 0x18, 0xad, 0x40, 0xf9, 0xd4, 0xed, 0xe3, 0xee,
	0x54, 0x42, 0x29, 0x7c, 0x4d, 0xa5, 0x65, 0x21, 0x99, 0x96, 0xeb, 0x00, 0x23, 0xa6, 0x9f, 0x74,
	0x9c, 0x72, 0x0a, 0x3b, 0x4e, 0x43, 0x3e, 0x14, 0xcb, 0x7a, 0x87, 0x3e, 0x5b, 0xbf, 0x36, 0xa0,
	0xae, 0x93, 0x5d, 0xc8, 0x90, 0x6d, 0x66, 0xcb, 0x2e, 0xea, 0x64, 0xcf, 0x45, 0xb2, 0xe3, 0x69,
	0x52, 0xca, 0x4a, 0x93, 0x72, 0x22, 0x4d, 0xde, 0x87, 0x86, 0xac, 0x74, 0x80, 0xde, 0x81, 0xca,
	0x98, 0x13, 0x38, 0xb8, 0xeb, 0x0a, 0xff, 0x47, 0x5f, 0x74, 0xa6, 0xdb, 0xad, 0x7b, 0x30, 0x7f,
	0x80, 0x09, 0x25, 0x72, 0x6c, 0x75, 0xee, 0xb7, 0xf6, 0x60, 0xe1, 0xd8, 0x77, 0x62, 0xee, 0x12,
	0x76, 0x19, 0x71, 0xbb, 0x22, 0xd5, 0x0b, 0x09, 0xd5, 0x27, 0xb0, 0xc4, 0x02, 0x4a, 0x96, 0x18,
	0xf7, 0xad, 0x91, 0xf4, 0xed, 0x37, 0xa0, 0x21, 0xd4, 0xed, 0x52, 0x69, 0x2c, 0xc4, 0x36, 0x55,
	0x21, 0x16, 0xb3, 0xb2, 0x3e, 0x96, 0xde, 0xac, 0x3f, 0x18, 0xb0, 0x2c, 0x0f, 0xd3, 0x1e, 0x79,
	0x44, 0x79, 0xb4, 0xe7, 0xbc, 0xbc, 0x5d, 0xe7, 0x00, 0x59, 0x83, 0xea, 0xd0, 0x23, 0x98, 0x95,
	0x20, 0x56, 0x3a, 0x2a, 0x21, 0x81, 0x96, 0x9e, 0xe9, 0x22, 0x7e, 0x3e, 0x8d, 0x0b, 0xba, 0x88,
	0x9f, 0x13, 0xeb, 0x1f, 0x06, 0x40, 0xa4, 0xfe, 0x4b, 0xa5, 0xfb, 0x35, 0x06, 0x2c, 0xdf, 0x84,
	0x5a, 0x64, 0x74, 0x80, 0xbe, 0x0a, 0x35, 0xae, 0x7e, 0xc8, 0x9b, 0x47, 0xfc, 0x9a, 0x66, 0x2a,
	0x48, 0x61, 0x06, 0x67, 0xfa, 0x6c, 0x59, 0xb0, 0x38, 0x9d, 0x02, 0x6a, 0x62, 0xc0, 0x3a, 0x0c,
	0x33, 0xcc, 0x91, 0x1c, 0xfd, 0x9f, 0x23, 0x76, 0x0a, 0xcb, 0xf2, 0x18, 0x51, 0x17, 0x75, 0x5f,
	0x8b, 0xdb, 0xa4, 0xfb, 0x15, 0x24, 0xa6, 0x95, 0x6c, 0xd6, 0xce, 0x8f, 0xcd, 0x69, 0x5b, 0xf2,
	0x94, 0x6d, 0x46, 0xf7, 0xa1, 0x11, 0xfb, 0xe1, 0x02, 0x69, 0x7f, 0xed, 0x68, 0x69, 0x57, 0xd0,
	0xfb, 0xb4, 0x33, 0x17, 0x6f, 0xe9, 0xa6, 0x29, 0xf5, 0x23, 0x52, 0x06, 0xaf, 0x87, 0x50, 0x93,
	0x7e, 0x4e, 0x42, 0xdb, 0x19, 0xcc, 0xc4, 0x8f, 0x4d, 0xad, 0x55, 0x1d, 0xb7, 0x00, 0x3d, 0xa1,
	0x28, 0x49, 0xf6, 0xdd, 0xd1, 0x74, 0x91, 0xb9, 0x15, 0xfc, 0x00, 0x1a, 0xfb, 0xb8, 0x8f, 0x23,
	0x8e, 0x79, 0xec, 0x5d, 0x49, 0xed, 0x61, 0xbd, 0xf3, 0xce, 0x27, 0x45, 0x58, 0x4d, 0x0f, 0x4b,
	0x05, 0x3a, 0x17, 0x62, 0x68, 0xa8, 0x98, 0xa7, 0x7e, 0x21, 0xc5, 0x52, 0xfb, 0x33, 0x40, 0x2b,
	0xcf, 0x38, 0x1c, 0x9d, 0xd3, 0x16, 0x39, 0x97, 0x24, 0xed, 0x88, 0x3c, 0x9f, 0xa4, 0x00, 0x36,
	0x34, 0x1c, 0xf6, 0x45, 0x85, 0xb9, 0x8a, 0xcc, 0xd7, 0x72, 0xc8, 0x0c, 0xd0, 0x10, 0x9a, 0xba,
	0x59, 0x3d, 0x7a, 0x53, 0x13, 0x14, 0xd7, 0x31, 0xb2, 0x0b, 0x4d, 0x16, 0x27, 0xd7, 0xf4, 0xa8,
	0x36, 0x74, 0xfe, 0x34, 0x07, 0xcd, 0xd4, 0x38, 0x42, 0x44, 0xce, 0x39, 0xac, 0x68, 0xc6, 0xcd,
	0xe8, 0x9e, 0x26, 0x70, 0xd2, 0xc3, 0x91, 0x56, 0x8e, 0xf9, 0x07, 0x7a, 0x06, 0x37, 0x54, 0x93,
	0x15, 0xb4, 0xa6, 0xb2, 0x51, 0xe4, 0x43, 0x1e, 0xc6, 0x67, 0xb0, 0xa9, 0x1c, 0xd9, 0xec, 0x4d,
	0x78, 0x72, 0x1d, 0xee, 0x67, 0x0b, 0x79, 0x5d, 0xb5, 0xa8, 0x18, 0x01, 0x9d, 0xd2, 0x70, 0x54,
	0x09, 0xe2, 0xe1, 0xf8, 0x5f, 0x92, 0x33, 0xd4, 0x0f, 0x09, 0xdf, 0xce, 0x3d, 0xdb, 0xba, 0x82,
	0x03, 0x3f, 0x82, 0x56, 0xac, 0xb6, 0xb1, 0xb8, 0xd9, 0x9b, 0xb0, 0xa6, 0x48, 0x79, 0xfd, 0xbe,
	0x0a, 0xfb, 0xc7, 0xb0, 0xc2, 0x02, 0xfc, 0x8a, 0xd8, 0x6b, 0x03, 0xfa, 0x37, 0x26, 0xdc, 0x8c,
	0x4f, 0x5c, 0x44, 0x34, 0x3f, 0x86, 0xda, 0x43, 0xfb, 0x42, 0x0c, 0x74, 0xd0, 0xac, 0x41, 0x4d,
	0x6b, 0xd6, 0x06, 0xf4, 0x90, 0x9f, 0x58, 0xec, 0xad, 0xad, 0xae, 0xe0, 0x62, 0x7a, 0x34, 0x9b,
	0xdd, 0xb7, 0x69, 0xe9, 0x14, 0x03, 0x2f, 0x11, 0xa0, 0x87, 0xce, 0x4c, 0xce, 0x9b, 0x19, 0xeb,
	0x6c, 0x70, 0xf6, 0x2c, 0x3a, 0xc0, 0x98, 0x2c, 0xfd, 0x01, 0x26, 0x4f, 0xbb, 0x66, 0xeb, 0xfc,
	0x5e, 0x74, 0x8e, 0xe5, 0xf3, 0x82, 0x16, 0xb7, 0x9f, 0x99, 0x30, 0xcf, 0xfb, 0x36, 0x01, 0xd8,
	0x07, 0xe2, 0x5a, 0x21, 0xfa, 0xf4, 0x2d, 0x4d, 0xd1, 0x89, 0x9a, 0xc6, 0x96, 0xb6, 0xd9, 0x44,
	0x0f, 0x28, 0x5a, 0xe2, 0x4d, 0xa9, 0x67, 0x2e, 0x3e, 0x4f, 0xe1, 0x56, 0xb4, 0x35, 0x56, 0x47,
	0x66, 0xf1, 0x5c, 0xd5, 0xf1, 0x94, 0x6e, 0x18, 0x42, 0x8a, 0x0e, 0xa0, 0x78, 0x7f, 0x9c, 0xa1,
	0xe6, 0x14, 0x99, 0xbc, 0x16, 0x6b, 0x91, 0xf9, 0x95, 0x19, 0xde, 0x2c, 0xa3, 0x06, 0x47, 0xc0,
	0xf3, 0x04, 0x80, 0x91, 0x69, 0x87, 0xb6, 0xad, 0xc1, 0x46, 0xfe, 0xb2, 0x95, 0xdd, 0x2d, 0xa2,
	0x23, 0xfa, 0x2f, 0xa0, 0xf0, 0x51, 0x76, 0xeb, 0x86, 0x4a, 0x71, 0xa9, 0xad, 0x9b, 0xc5, 0xf5,
	0x5b, 0xb0, 0xcc, 0x3f, 0x08, 0xae, 0xc4, 0xb6, 0x9d, 0xc9, 0x36, 0x40, 0x8f, 0xe9, 0x0c, 0x89,
	0xb7, 0x98, 0x8a, 0x0b, 0x5c, 0xaa, 0xff, 0x9c, 0xa5, 0xe8, 0x03, 0x00, 0x06, 0x19, 0x7d, 0x9b,
	0xa9, 0x9f, 0x16, 0xb0, 0xdf, 0x9b, 0xb0, 0x14, 0x5d, 0xde, 0x05, 0x5c, 0xc7, 0x62, 0xda, 0x2c,
	0x75, 0x1b, 0xaf, 0x65, 0x5e, 0xff, 0x78, 0x0b, 0xd1, 0xca, 0xea, 0x78, 0xd0, 0x63, 0x3a, 0x1c,
	0x92, 0x08, 0x5b, 0xfa, 0x6b, 0x49, 0x2e, 0x86, 0x1f, 0x42, 0x33, 0xf6, 0x81, 0x5c, 0x09, 0x73,
	0xf0, 0xbe, 0x9d, 0xc1, 0x3b, 0x08, 0x9d, 0x90, 0x6c, 0x92, 0x14, 0x4e, 0x50, 0xf4, 0x51, 0xd9,
	0x3a, 0x3f, 0x82, 0x45, 0xf9, 0x9a, 0x96, 0xd7, 0x0f, 0x3a, 0x04, 0xf7, 0xb6, 0xfe, 0xf8, 0xa2,
	0x6d, 0xfc, 0xf9, 0x45, 0xdb, 0xf8, 0xdb, 0x8b, 0xb6, 0xf1, 0xf3, 0xbf, 0xb7, 0x3f, 0xf7, 0x9d,
	0xe4, 0xdf, 0xea, 0x7a, 0x25, 0xfa, 0x77, 0xbb, 0x2f, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x07,
	0x60, 0xf1, 0x52, 0x97, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PatientServiceClient interface {
	CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error)
	GetPatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*Patient, error)
	GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*Patients, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*Patient, error)
	DeletePatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*Status, error)
}

type patientServiceClient struct {
	cc *grpc.ClientConn
}

func NewPatientServiceClient(cc *grpc.ClientConn) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientService/CreatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientService/GetPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := c.cc.Invoke(ctx, "/booking_service.PatientService/GetPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientService/UpdatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) DeletePatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.PatientService/DeletePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
type PatientServiceServer interface {
	CreatePatient(context.Context, *Patient) (*Patient, error)
	GetPatient(context.Context, *GetPatientRequest) (*Patient, error)
	GetPatients(context.Context, *GetPatientsRequest) (*Patients, error)
	UpdatePatient(context.Context, *UpdatePatientRequest) (*Patient, error)
	DeletePatient(context.Context, *GetPatientRequest) (*Status, error)
}

// UnimplementedPatientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPatientServiceServer struct {
}

func (*UnimplementedPatientServiceServer) CreatePatient(ctx context.Context, req *Patient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (*UnimplementedPatientServiceServer) GetPatient(ctx context.Context, req *GetPatientRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (*UnimplementedPatientServiceServer) GetPatients(ctx context.Context, req *GetPatientsRequest) (*Patients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (*UnimplementedPatientServiceServer) UpdatePatient(ctx context.Context, req *UpdatePatientRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (*UnimplementedPatientServiceServer) DeletePatient(ctx context.Context, req *GetPatientRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}

func RegisterPatientServiceServer(s *grpc.Server, srv PatientServiceServer) {
	s.RegisterService(&_PatientService_serviceDesc, srv)
}

func _PatientService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientService/CreatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).CreatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientService/GetPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatient(ctx, req.(*GetPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientService/GetPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatients(ctx, req.(*GetPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientService/UpdatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdatePatient(ctx, req.(*UpdatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientService/DeletePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).DeletePatient(ctx, req.(*GetPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _PatientService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _PatientService_GetPatient_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _PatientService_GetPatients_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _PatientService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _PatientService_DeletePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// DoctorAvailabilityServiceClient is the client API for DoctorAvailabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorAvailabilityServiceClient interface {
	CreateDoctorAvailability(ctx context.Context, in *CreateDoctorAvailabilitys, opts ...grpc.CallOption) (*DoctorAvailability, error)
	GetDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailability, error)
	GetDoctorAvailabilityByDoctorId(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailabilitys, error)
	UpdateDoctorAvailability(ctx context.Context, in *UpdateDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailability, error)
	DeleteDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*Status, error)
}

type doctorAvailabilityServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorAvailabilityServiceClient(cc *grpc.ClientConn) DoctorAvailabilityServiceClient {
	return &doctorAvailabilityServiceClient{cc}
}

func (c *doctorAvailabilityServiceClient) CreateDoctorAvailability(ctx context.Context, in *CreateDoctorAvailabilitys, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorAvailabilityService/CreateDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorAvailabilityServiceClient) GetDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorAvailabilityService/GetDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorAvailabilityServiceClient) GetDoctorAvailabilityByDoctorId(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailabilitys, error) {
	out := new(DoctorAvailabilitys)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorAvailabilityService/GetDoctorAvailabilityByDoctorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorAvailabilityServiceClient) UpdateDoctorAvailability(ctx context.Context, in *UpdateDoctorAvailabilityById, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorAvailabilityService/UpdateDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorAvailabilityServiceClient) DeleteDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityById, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorAvailabilityService/DeleteDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorAvailabilityServiceServer is the server API for DoctorAvailabilityService service.
type DoctorAvailabilityServiceServer interface {
	CreateDoctorAvailability(context.Context, *CreateDoctorAvailabilitys) (*DoctorAvailability, error)
	GetDoctorAvailability(context.Context, *GetDoctorAvailabilityById) (*DoctorAvailability, error)
	GetDoctorAvailabilityByDoctorId(context.Context, *GetDoctorAvailabilityById) (*DoctorAvailabilitys, error)
	UpdateDoctorAvailability(context.Context, *UpdateDoctorAvailabilityById) (*DoctorAvailability, error)
	DeleteDoctorAvailability(context.Context, *GetDoctorAvailabilityById) (*Status, error)
}

// UnimplementedDoctorAvailabilityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorAvailabilityServiceServer struct {
}

func (*UnimplementedDoctorAvailabilityServiceServer) CreateDoctorAvailability(ctx context.Context, req *CreateDoctorAvailabilitys) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorAvailability not implemented")
}
func (*UnimplementedDoctorAvailabilityServiceServer) GetDoctorAvailability(ctx context.Context, req *GetDoctorAvailabilityById) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvailability not implemented")
}
func (*UnimplementedDoctorAvailabilityServiceServer) GetDoctorAvailabilityByDoctorId(ctx context.Context, req *GetDoctorAvailabilityById) (*DoctorAvailabilitys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvailabilityByDoctorId not implemented")
}
func (*UnimplementedDoctorAvailabilityServiceServer) UpdateDoctorAvailability(ctx context.Context, req *UpdateDoctorAvailabilityById) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorAvailability not implemented")
}
func (*UnimplementedDoctorAvailabilityServiceServer) DeleteDoctorAvailability(ctx context.Context, req *GetDoctorAvailabilityById) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorAvailability not implemented")
}

func RegisterDoctorAvailabilityServiceServer(s *grpc.Server, srv DoctorAvailabilityServiceServer) {
	s.RegisterService(&_DoctorAvailabilityService_serviceDesc, srv)
}

func _DoctorAvailabilityService_CreateDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorAvailabilitys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorAvailabilityServiceServer).CreateDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorAvailabilityService/CreateDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorAvailabilityServiceServer).CreateDoctorAvailability(ctx, req.(*CreateDoctorAvailabilitys))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorAvailabilityService_GetDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorAvailabilityById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorAvailabilityServiceServer).GetDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorAvailabilityService/GetDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorAvailabilityServiceServer).GetDoctorAvailability(ctx, req.(*GetDoctorAvailabilityById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorAvailabilityService_GetDoctorAvailabilityByDoctorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorAvailabilityById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorAvailabilityServiceServer).GetDoctorAvailabilityByDoctorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorAvailabilityService/GetDoctorAvailabilityByDoctorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorAvailabilityServiceServer).GetDoctorAvailabilityByDoctorId(ctx, req.(*GetDoctorAvailabilityById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorAvailabilityService_UpdateDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorAvailabilityById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorAvailabilityServiceServer).UpdateDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorAvailabilityService/UpdateDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorAvailabilityServiceServer).UpdateDoctorAvailability(ctx, req.(*UpdateDoctorAvailabilityById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorAvailabilityService_DeleteDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorAvailabilityById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorAvailabilityServiceServer).DeleteDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorAvailabilityService/DeleteDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorAvailabilityServiceServer).DeleteDoctorAvailability(ctx, req.(*GetDoctorAvailabilityById))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorAvailabilityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.DoctorAvailabilityService",
	HandlerType: (*DoctorAvailabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorAvailability",
			Handler:    _DoctorAvailabilityService_CreateDoctorAvailability_Handler,
		},
		{
			MethodName: "GetDoctorAvailability",
			Handler:    _DoctorAvailabilityService_GetDoctorAvailability_Handler,
		},
		{
			MethodName: "GetDoctorAvailabilityByDoctorId",
			Handler:    _DoctorAvailabilityService_GetDoctorAvailabilityByDoctorId_Handler,
		},
		{
			MethodName: "UpdateDoctorAvailability",
			Handler:    _DoctorAvailabilityService_UpdateDoctorAvailability_Handler,
		},
		{
			MethodName: "DeleteDoctorAvailability",
			Handler:    _DoctorAvailabilityService_DeleteDoctorAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// BookedAppointmentServiceClient is the client API for BookedAppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedAppointmentServiceClient interface {
	CreateBookedAppointment(ctx context.Context, in *CreateBookedAppointments, opts ...grpc.CallOption) (*BookedAppointment, error)
	GetBookedAppointment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BookedAppointment, error)
	GetBookedAppointmentsByPatientID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBookedAppointments, error)
	GetBookedAppointmentsByDoctorID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBookedAppointments, error)
	UpdateBookedAppointment(ctx context.Context, in *UpdateBookedAppointmentRequest, opts ...grpc.CallOption) (*BookedAppointment, error)
	UpdatePatientStatusByToken(ctx context.Context, in *UpdRequest, opts ...grpc.CallOption) (*BookedAppointment, error)
	DeleteBookedAppointment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Status, error)
}

type bookedAppointmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewBookedAppointmentServiceClient(cc *grpc.ClientConn) BookedAppointmentServiceClient {
	return &bookedAppointmentServiceClient{cc}
}

func (c *bookedAppointmentServiceClient) CreateBookedAppointment(ctx context.Context, in *CreateBookedAppointments, opts ...grpc.CallOption) (*BookedAppointment, error) {
	out := new(BookedAppointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/CreateBookedAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) GetBookedAppointment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BookedAppointment, error) {
	out := new(BookedAppointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/GetBookedAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) GetBookedAppointmentsByPatientID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBookedAppointments, error) {
	out := new(GetBookedAppointments)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/GetBookedAppointmentsByPatientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) GetBookedAppointmentsByDoctorID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBookedAppointments, error) {
	out := new(GetBookedAppointments)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/GetBookedAppointmentsByDoctorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) UpdateBookedAppointment(ctx context.Context, in *UpdateBookedAppointmentRequest, opts ...grpc.CallOption) (*BookedAppointment, error) {
	out := new(BookedAppointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/UpdateBookedAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) UpdatePatientStatusByToken(ctx context.Context, in *UpdRequest, opts ...grpc.CallOption) (*BookedAppointment, error) {
	out := new(BookedAppointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/UpdatePatientStatusByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) DeleteBookedAppointment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentService/DeleteBookedAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedAppointmentServiceServer is the server API for BookedAppointmentService service.
type BookedAppointmentServiceServer interface {
	CreateBookedAppointment(context.Context, *CreateBookedAppointments) (*BookedAppointment, error)
	GetBookedAppointment(context.Context, *GetRequest) (*BookedAppointment, error)
	GetBookedAppointmentsByPatientID(context.Context, *GetRequest) (*GetBookedAppointments, error)
	GetBookedAppointmentsByDoctorID(context.Context, *GetRequest) (*GetBookedAppointments, error)
	UpdateBookedAppointment(context.Context, *UpdateBookedAppointmentRequest) (*BookedAppointment, error)
	UpdatePatientStatusByToken(context.Context, *UpdRequest) (*BookedAppointment, error)
	DeleteBookedAppointment(context.Context, *GetRequest) (*Status, error)
}

// UnimplementedBookedAppointmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBookedAppointmentServiceServer struct {
}

func (*UnimplementedBookedAppointmentServiceServer) CreateBookedAppointment(ctx context.Context, req *CreateBookedAppointments) (*BookedAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookedAppointment not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) GetBookedAppointment(ctx context.Context, req *GetRequest) (*BookedAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookedAppointment not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) GetBookedAppointmentsByPatientID(ctx context.Context, req *GetRequest) (*GetBookedAppointments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookedAppointmentsByPatientID not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) GetBookedAppointmentsByDoctorID(ctx context.Context, req *GetRequest) (*GetBookedAppointments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookedAppointmentsByDoctorID not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) UpdateBookedAppointment(ctx context.Context, req *UpdateBookedAppointmentRequest) (*BookedAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookedAppointment not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) UpdatePatientStatusByToken(ctx context.Context, req *UpdRequest) (*BookedAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientStatusByToken not implemented")
}
func (*UnimplementedBookedAppointmentServiceServer) DeleteBookedAppointment(ctx context.Context, req *GetRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookedAppointment not implemented")
}

func RegisterBookedAppointmentServiceServer(s *grpc.Server, srv BookedAppointmentServiceServer) {
	s.RegisterService(&_BookedAppointmentService_serviceDesc, srv)
}

func _BookedAppointmentService_CreateBookedAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookedAppointments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).CreateBookedAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/CreateBookedAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).CreateBookedAppointment(ctx, req.(*CreateBookedAppointments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_GetBookedAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/GetBookedAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointment(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_GetBookedAppointmentsByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointmentsByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/GetBookedAppointmentsByPatientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointmentsByPatientID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_GetBookedAppointmentsByDoctorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointmentsByDoctorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/GetBookedAppointmentsByDoctorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).GetBookedAppointmentsByDoctorID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_UpdateBookedAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookedAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).UpdateBookedAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/UpdateBookedAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).UpdateBookedAppointment(ctx, req.(*UpdateBookedAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_UpdatePatientStatusByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).UpdatePatientStatusByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/UpdatePatientStatusByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).UpdatePatientStatusByToken(ctx, req.(*UpdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_DeleteBookedAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).DeleteBookedAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentService/DeleteBookedAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).DeleteBookedAppointment(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedAppointmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.BookedAppointmentService",
	HandlerType: (*BookedAppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookedAppointment",
			Handler:    _BookedAppointmentService_CreateBookedAppointment_Handler,
		},
		{
			MethodName: "GetBookedAppointment",
			Handler:    _BookedAppointmentService_GetBookedAppointment_Handler,
		},
		{
			MethodName: "GetBookedAppointmentsByPatientID",
			Handler:    _BookedAppointmentService_GetBookedAppointmentsByPatientID_Handler,
		},
		{
			MethodName: "GetBookedAppointmentsByDoctorID",
			Handler:    _BookedAppointmentService_GetBookedAppointmentsByDoctorID_Handler,
		},
		{
			MethodName: "UpdateBookedAppointment",
			Handler:    _BookedAppointmentService_UpdateBookedAppointment_Handler,
		},
		{
			MethodName: "UpdatePatientStatusByToken",
			Handler:    _BookedAppointmentService_UpdatePatientStatusByToken_Handler,
		},
		{
			MethodName: "DeleteBookedAppointment",
			Handler:    _BookedAppointmentService_DeleteBookedAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// PatientPaymentServiceClient is the client API for PatientPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PatientPaymentServiceClient interface {
	MakePayment(ctx context.Context, in *PatientPayment, opts ...grpc.CallOption) (*PatientPayment, error)
	GetPayment(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*PatientPayment, error)
	GetPaymentsByPatienId(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*GetPaymentsResp, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*PatientPayment, error)
	DeletePayment(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*Status, error)
}

type patientPaymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPatientPaymentServiceClient(cc *grpc.ClientConn) PatientPaymentServiceClient {
	return &patientPaymentServiceClient{cc}
}

func (c *patientPaymentServiceClient) MakePayment(ctx context.Context, in *PatientPayment, opts ...grpc.CallOption) (*PatientPayment, error) {
	out := new(PatientPayment)
	err := c.cc.Invoke(ctx, "/booking_service.PatientPaymentService/MakePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientPaymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*PatientPayment, error) {
	out := new(PatientPayment)
	err := c.cc.Invoke(ctx, "/booking_service.PatientPaymentService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientPaymentServiceClient) GetPaymentsByPatienId(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*GetPaymentsResp, error) {
	out := new(GetPaymentsResp)
	err := c.cc.Invoke(ctx, "/booking_service.PatientPaymentService/GetPaymentsByPatienId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientPaymentServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*PatientPayment, error) {
	out := new(PatientPayment)
	err := c.cc.Invoke(ctx, "/booking_service.PatientPaymentService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientPaymentServiceClient) DeletePayment(ctx context.Context, in *GetPaymentReq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.PatientPaymentService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientPaymentServiceServer is the server API for PatientPaymentService service.
type PatientPaymentServiceServer interface {
	MakePayment(context.Context, *PatientPayment) (*PatientPayment, error)
	GetPayment(context.Context, *GetPaymentReq) (*PatientPayment, error)
	GetPaymentsByPatienId(context.Context, *GetPaymentReq) (*GetPaymentsResp, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*PatientPayment, error)
	DeletePayment(context.Context, *GetPaymentReq) (*Status, error)
}

// UnimplementedPatientPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPatientPaymentServiceServer struct {
}

func (*UnimplementedPatientPaymentServiceServer) MakePayment(ctx context.Context, req *PatientPayment) (*PatientPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}
func (*UnimplementedPatientPaymentServiceServer) GetPayment(ctx context.Context, req *GetPaymentReq) (*PatientPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (*UnimplementedPatientPaymentServiceServer) GetPaymentsByPatienId(ctx context.Context, req *GetPaymentReq) (*GetPaymentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsByPatienId not implemented")
}
func (*UnimplementedPatientPaymentServiceServer) UpdatePayment(ctx context.Context, req *UpdatePaymentRequest) (*PatientPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (*UnimplementedPatientPaymentServiceServer) DeletePayment(ctx context.Context, req *GetPaymentReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}

func RegisterPatientPaymentServiceServer(s *grpc.Server, srv PatientPaymentServiceServer) {
	s.RegisterService(&_PatientPaymentService_serviceDesc, srv)
}

func _PatientPaymentService_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientPaymentServiceServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientPaymentService/MakePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientPaymentServiceServer).MakePayment(ctx, req.(*PatientPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientPaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientPaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientPaymentService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientPaymentServiceServer).GetPayment(ctx, req.(*GetPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientPaymentService_GetPaymentsByPatienId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientPaymentServiceServer).GetPaymentsByPatienId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientPaymentService/GetPaymentsByPatienId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientPaymentServiceServer).GetPaymentsByPatienId(ctx, req.(*GetPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientPaymentService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientPaymentServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientPaymentService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientPaymentServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientPaymentService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientPaymentServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientPaymentService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientPaymentServiceServer).DeletePayment(ctx, req.(*GetPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientPaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.PatientPaymentService",
	HandlerType: (*PatientPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakePayment",
			Handler:    _PatientPaymentService_MakePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PatientPaymentService_GetPayment_Handler,
		},
		{
			MethodName: "GetPaymentsByPatienId",
			Handler:    _PatientPaymentService_GetPaymentsByPatienId_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _PatientPaymentService_UpdatePayment_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PatientPaymentService_DeletePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// ArchiveServiceClient is the client API for ArchiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveServiceClient interface {
	CreateArchive(ctx context.Context, in *CreateArchiveReq, opts ...grpc.CallOption) (*Archive, error)
	GetArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Archive, error)
	GetArchivesByPatientID(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Archives, error)
	UpdateArchive(ctx context.Context, in *UpdateArchiveRequest, opts ...grpc.CallOption) (*Archive, error)
	DeleteArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Status, error)
}

type archiveServiceClient struct {
	cc *grpc.ClientConn
}

func NewArchiveServiceClient(cc *grpc.ClientConn) ArchiveServiceClient {
	return &archiveServiceClient{cc}
}

func (c *archiveServiceClient) CreateArchive(ctx context.Context, in *CreateArchiveReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/CreateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) GetArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/GetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) GetArchivesByPatientID(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Archives, error) {
	out := new(Archives)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/GetArchivesByPatientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) UpdateArchive(ctx context.Context, in *UpdateArchiveRequest, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/UpdateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) DeleteArchive(ctx context.Context, in *GetArchiveReq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/DeleteArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServiceServer is the server API for ArchiveService service.
type ArchiveServiceServer interface {
	CreateArchive(context.Context, *CreateArchiveReq) (*Archive, error)
	GetArchive(context.Context, *GetArchiveReq) (*Archive, error)
	GetArchivesByPatientID(context.Context, *GetArchiveReq) (*Archives, error)
	UpdateArchive(context.Context, *UpdateArchiveRequest) (*Archive, error)
	DeleteArchive(context.Context, *GetArchiveReq) (*Status, error)
}

// UnimplementedArchiveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveServiceServer struct {
}

func (*UnimplementedArchiveServiceServer) CreateArchive(ctx context.Context, req *CreateArchiveReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) GetArchive(ctx context.Context, req *GetArchiveReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) GetArchivesByPatientID(ctx context.Context, req *GetArchiveReq) (*Archives, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivesByPatientID not implemented")
}
func (*UnimplementedArchiveServiceServer) UpdateArchive(ctx context.Context, req *UpdateArchiveRequest) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) DeleteArchive(ctx context.Context, req *GetArchiveReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArchive not implemented")
}

func RegisterArchiveServiceServer(s *grpc.Server, srv ArchiveServiceServer) {
	s.RegisterService(&_ArchiveService_serviceDesc, srv)
}

func _ArchiveService_CreateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).CreateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/CreateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).CreateArchive(ctx, req.(*CreateArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_GetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).GetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/GetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).GetArchive(ctx, req.(*GetArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_GetArchivesByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).GetArchivesByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/GetArchivesByPatientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).GetArchivesByPatientID(ctx, req.(*GetArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_UpdateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).UpdateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/UpdateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).UpdateArchive(ctx, req.(*UpdateArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_DeleteArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).DeleteArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/DeleteArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).DeleteArchive(ctx, req.(*GetArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchiveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.ArchiveService",
	HandlerType: (*ArchiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArchive",
			Handler:    _ArchiveService_CreateArchive_Handler,
		},
		{
			MethodName: "GetArchive",
			Handler:    _ArchiveService_GetArchive_Handler,
		},
		{
			MethodName: "GetArchivesByPatientID",
			Handler:    _ArchiveService_GetArchivesByPatientID_Handler,
		},
		{
			MethodName: "UpdateArchive",
			Handler:    _ArchiveService_UpdateArchive_Handler,
		},
		{
			MethodName: "DeleteArchive",
			Handler:    _ArchiveService_DeleteArchive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// UploadedFileServiceClient is the client API for UploadedFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadedFileServiceClient interface {
	UploadFile(ctx context.Context, in *CreateUploadedFile, opts ...grpc.CallOption) (*UploadedFile, error)
	GetFileByPatientID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*UploadedFile, error)
	GetFilesByPatientID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*UploadedFiles, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UploadedFile, error)
	DeleteFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*Status, error)
}

type uploadedFileServiceClient struct {
	cc *grpc.ClientConn
}

func NewUploadedFileServiceClient(cc *grpc.ClientConn) UploadedFileServiceClient {
	return &uploadedFileServiceClient{cc}
}

func (c *uploadedFileServiceClient) UploadFile(ctx context.Context, in *CreateUploadedFile, opts ...grpc.CallOption) (*UploadedFile, error) {
	out := new(UploadedFile)
	err := c.cc.Invoke(ctx, "/booking_service.UploadedFileService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) GetFileByPatientID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*UploadedFile, error) {
	out := new(UploadedFile)
	err := c.cc.Invoke(ctx, "/booking_service.UploadedFileService/GetFileByPatientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) GetFilesByPatientID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*UploadedFiles, error) {
	out := new(UploadedFiles)
	err := c.cc.Invoke(ctx, "/booking_service.UploadedFileService/GetFilesByPatientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UploadedFile, error) {
	out := new(UploadedFile)
	err := c.cc.Invoke(ctx, "/booking_service.UploadedFileService/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) DeleteFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.UploadedFileService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadedFileServiceServer is the server API for UploadedFileService service.
type UploadedFileServiceServer interface {
	UploadFile(context.Context, *CreateUploadedFile) (*UploadedFile, error)
	GetFileByPatientID(context.Context, *GetFileRequest) (*UploadedFile, error)
	GetFilesByPatientID(context.Context, *GetFileRequest) (*UploadedFiles, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*UploadedFile, error)
	DeleteFile(context.Context, *GetFileRequest) (*Status, error)
}

// UnimplementedUploadedFileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUploadedFileServiceServer struct {
}

func (*UnimplementedUploadedFileServiceServer) UploadFile(ctx context.Context, req *CreateUploadedFile) (*UploadedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedUploadedFileServiceServer) GetFileByPatientID(ctx context.Context, req *GetFileRequest) (*UploadedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByPatientID not implemented")
}
func (*UnimplementedUploadedFileServiceServer) GetFilesByPatientID(ctx context.Context, req *GetFileRequest) (*UploadedFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByPatientID not implemented")
}
func (*UnimplementedUploadedFileServiceServer) UpdateFile(ctx context.Context, req *UpdateFileRequest) (*UploadedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (*UnimplementedUploadedFileServiceServer) DeleteFile(ctx context.Context, req *GetFileRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}

func RegisterUploadedFileServiceServer(s *grpc.Server, srv UploadedFileServiceServer) {
	s.RegisterService(&_UploadedFileService_serviceDesc, srv)
}

func _UploadedFileService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.UploadedFileService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).UploadFile(ctx, req.(*CreateUploadedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_GetFileByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).GetFileByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.UploadedFileService/GetFileByPatientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).GetFileByPatientID(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_GetFilesByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).GetFilesByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.UploadedFileService/GetFilesByPatientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).GetFilesByPatientID(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.UploadedFileService/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.UploadedFileService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).DeleteFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadedFileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.UploadedFileService",
	HandlerType: (*UploadedFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploadedFileService_UploadFile_Handler,
		},
		{
			MethodName: "GetFileByPatientID",
			Handler:    _UploadedFileService_GetFileByPatientID_Handler,
		},
		{
			MethodName: "GetFilesByPatientID",
			Handler:    _UploadedFileService_GetFilesByPatientID_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _UploadedFileService_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _UploadedFileService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

// DoctorNoteServiceClient is the client API for DoctorNoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorNoteServiceClient interface {
	CreateDoctorNote(ctx context.Context, in *CreateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	GetDoctorNote(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	GetDoctorNotesByPatienId(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNotes, error)
	UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	DeleteDoctorNote(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*Status, error)
}

type doctorNoteServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorNoteServiceClient(cc *grpc.ClientConn) DoctorNoteServiceClient {
	return &doctorNoteServiceClient{cc}
}

func (c *doctorNoteServiceClient) CreateDoctorNote(ctx context.Context, in *CreateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNoteService/CreateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNoteServiceClient) GetDoctorNote(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNoteService/GetDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNoteServiceClient) GetDoctorNotesByPatienId(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNotes, error) {
	out := new(DoctorNotes)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNoteService/GetDoctorNotesByPatienId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNoteServiceClient) UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNoteService/UpdateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNoteServiceClient) DeleteDoctorNote(ctx context.Context, in *GetDoctorNoteReq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNoteService/DeleteDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorNoteServiceServer is the server API for DoctorNoteService service.
type DoctorNoteServiceServer interface {
	CreateDoctorNote(context.Context, *CreateDoctorNoteReq) (*DoctorNote, error)
	GetDoctorNote(context.Context, *GetDoctorNoteReq) (*DoctorNote, error)
	GetDoctorNotesByPatienId(context.Context, *GetDoctorNoteReq) (*DoctorNotes, error)
	UpdateDoctorNote(context.Context, *UpdateDoctorNoteReq) (*DoctorNote, error)
	DeleteDoctorNote(context.Context, *GetDoctorNoteReq) (*Status, error)
}

// UnimplementedDoctorNoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorNoteServiceServer struct {
}

func (*UnimplementedDoctorNoteServiceServer) CreateDoctorNote(ctx context.Context, req *CreateDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorNote not implemented")
}
func (*UnimplementedDoctorNoteServiceServer) GetDoctorNote(ctx context.Context, req *GetDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorNote not implemented")
}
func (*UnimplementedDoctorNoteServiceServer) GetDoctorNotesByPatienId(ctx context.Context, req *GetDoctorNoteReq) (*DoctorNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorNotesByPatienId not implemented")
}
func (*UnimplementedDoctorNoteServiceServer) UpdateDoctorNote(ctx context.Context, req *UpdateDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorNote not implemented")
}
func (*UnimplementedDoctorNoteServiceServer) DeleteDoctorNote(ctx context.Context, req *GetDoctorNoteReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorNote not implemented")
}

func RegisterDoctorNoteServiceServer(s *grpc.Server, srv DoctorNoteServiceServer) {
	s.RegisterService(&_DoctorNoteService_serviceDesc, srv)
}

func _DoctorNoteService_CreateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNoteServiceServer).CreateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNoteService/CreateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNoteServiceServer).CreateDoctorNote(ctx, req.(*CreateDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNoteService_GetDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNoteServiceServer).GetDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNoteService/GetDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNoteServiceServer).GetDoctorNote(ctx, req.(*GetDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNoteService_GetDoctorNotesByPatienId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNoteServiceServer).GetDoctorNotesByPatienId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNoteService/GetDoctorNotesByPatienId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNoteServiceServer).GetDoctorNotesByPatienId(ctx, req.(*GetDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNoteService_UpdateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNoteServiceServer).UpdateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNoteService/UpdateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNoteServiceServer).UpdateDoctorNote(ctx, req.(*UpdateDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNoteService_DeleteDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNoteServiceServer).DeleteDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNoteService/DeleteDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNoteServiceServer).DeleteDoctorNote(ctx, req.(*GetDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorNoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.DoctorNoteService",
	HandlerType: (*DoctorNoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorNote",
			Handler:    _DoctorNoteService_CreateDoctorNote_Handler,
		},
		{
			MethodName: "GetDoctorNote",
			Handler:    _DoctorNoteService_GetDoctorNote_Handler,
		},
		{
			MethodName: "GetDoctorNotesByPatienId",
			Handler:    _DoctorNoteService_GetDoctorNotesByPatienId_Handler,
		},
		{
			MethodName: "UpdateDoctorNote",
			Handler:    _DoctorNoteService_UpdateDoctorNote_Handler,
		},
		{
			MethodName: "DeleteDoctorNote",
			Handler:    _DoctorNoteService_DeleteDoctorNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking-service/booking_service.proto",
}

func (m *GetPatientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPatientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPatientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPatientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPatientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPatientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePatientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePatientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePatientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Patient != nil {
		{
			size, err := m.Patient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Patients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Patient) > 0 {
		for iNdEx := len(m.Patient) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Patient[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreatePatientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePatientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePatientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Patient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatientUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatientUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CreateDoctorAvailabilitys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDoctorAvailabilitys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDoctorAvailabilitys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.AvailabilityTime) > 0 {
		i -= len(m.AvailabilityTime)
		copy(dAtA[i:], m.AvailabilityTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvailabilityDate) > 0 {
		i -= len(m.AvailabilityDate)
		copy(dAtA[i:], m.AvailabilityDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorAvailabilitys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorAvailabilitys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorAvailabilitys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoctorAvailability) > 0 {
		for iNdEx := len(m.DoctorAvailability) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorAvailability[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDoctorAvailabilityById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoctorAvailabilityById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDoctorAvailabilityById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorAvailabilityById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorAvailabilityById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorAvailabilityById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DoctorAvailability != nil {
		{
			size, err := m.DoctorAvailability.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdDoctorAvailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdDoctorAvailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdDoctorAvailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AvailabilityTime) > 0 {
		i -= len(m.AvailabilityTime)
		copy(dAtA[i:], m.AvailabilityTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AvailabilityDate) > 0 {
		i -= len(m.AvailabilityDate)
		copy(dAtA[i:], m.AvailabilityDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorAvailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorAvailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorAvailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.AvailabilityTime) > 0 {
		i -= len(m.AvailabilityTime)
		copy(dAtA[i:], m.AvailabilityTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvailabilityDate) > 0 {
		i -= len(m.AvailabilityDate)
		copy(dAtA[i:], m.AvailabilityDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AvailabilityDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBookedAppointments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBookedAppointments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBookedAppointments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x62
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BookedAppointment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookedAppointment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookedAppointment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x62
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BookedAppointment != nil {
		{
			size, err := m.BookedAppointment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBookedAppointment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBookedAppointment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBookedAppointment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBookedAppointmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBookedAppointmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBookedAppointmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BookedAppointment != nil {
		{
			size, err := m.BookedAppointment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBookedAppointments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBookedAppointments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBookedAppointments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BookedAppointments) > 0 {
		for iNdEx := len(m.BookedAppointments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BookedAppointments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PatientPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatientPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x42
	}
	if m.Ispaid {
		i--
		if m.Ispaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatientPayment) > 0 {
		for iNdEx := len(m.PatientPayment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PatientPayment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VisitsCount != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.VisitsCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BookedTime) > 0 {
		i -= len(m.BookedTime)
		copy(dAtA[i:], m.BookedTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BookedDate) > 0 {
		i -= len(m.BookedDate)
		copy(dAtA[i:], m.BookedDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ConsultationType) > 0 {
		i -= len(m.ConsultationType)
		copy(dAtA[i:], m.ConsultationType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ConsultationType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientToken) > 0 {
		i -= len(m.PatientToken)
		copy(dAtA[i:], m.PatientToken)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Archive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x6a
	}
	if m.VisitsCount != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.VisitsCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BookedTime) > 0 {
		i -= len(m.BookedTime)
		copy(dAtA[i:], m.BookedTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BookedDate) > 0 {
		i -= len(m.BookedDate)
		copy(dAtA[i:], m.BookedDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ConsultationType) > 0 {
		i -= len(m.ConsultationType)
		copy(dAtA[i:], m.ConsultationType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ConsultationType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientToken) > 0 {
		i -= len(m.PatientToken)
		copy(dAtA[i:], m.PatientToken)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VisitsCount != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.VisitsCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BookedTime) > 0 {
		i -= len(m.BookedTime)
		copy(dAtA[i:], m.BookedTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BookedDate) > 0 {
		i -= len(m.BookedDate)
		copy(dAtA[i:], m.BookedDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BookedDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsultationType) > 0 {
		i -= len(m.ConsultationType)
		copy(dAtA[i:], m.ConsultationType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.ConsultationType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PatientToken) > 0 {
		i -= len(m.PatientToken)
		copy(dAtA[i:], m.PatientToken)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Archives) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archives) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archives) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateArchiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArchiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateArchiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Archive != nil {
		{
			size, err := m.Archive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUploadedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUploadedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUploadedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UploadedFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadedFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadedFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uploaded) > 0 {
		for iNdEx := len(m.Uploaded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Uploaded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdUploadedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdUploadedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdUploadedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UploadedFile != nil {
		{
			size, err := m.UploadedFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NoteText) > 0 {
		i -= len(m.NoteText)
		copy(dAtA[i:], m.NoteText)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteText)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoteType) > 0 {
		i -= len(m.NoteType)
		copy(dAtA[i:], m.NoteType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateAt) > 0 {
		i -= len(m.UpdateAt)
		copy(dAtA[i:], m.UpdateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdateAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NoteText) > 0 {
		i -= len(m.NoteText)
		copy(dAtA[i:], m.NoteText)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteText)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoteType) > 0 {
		i -= len(m.NoteType)
		copy(dAtA[i:], m.NoteType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentId) > 0 {
		i -= len(m.AppointmentId)
		copy(dAtA[i:], m.AppointmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorNotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoctorNote) > 0 {
		for iNdEx := len(m.DoctorNote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorNote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdDoctorNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdDoctorNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdDoctorNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NoteText) > 0 {
		i -= len(m.NoteText)
		copy(dAtA[i:], m.NoteText)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteText)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoteType) > 0 {
		i -= len(m.NoteType)
		copy(dAtA[i:], m.NoteType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.NoteType)))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DoctorNote != nil {
		{
			size, err := m.DoctorNote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBookingService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBookingService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPatientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPatientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePatientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Patient != nil {
		l = m.Patient.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Patients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Patient) > 0 {
		for _, e := range m.Patient {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePatientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Patient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatientUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDoctorAvailabilitys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AvailabilityDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AvailabilityTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorAvailabilitys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoctorAvailability) > 0 {
		for _, e := range m.DoctorAvailability {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDoctorAvailabilityById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorAvailabilityById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.DoctorAvailability != nil {
		l = m.DoctorAvailability.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdDoctorAvailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvailabilityDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AvailabilityTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorAvailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AvailabilityDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AvailabilityTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Status {
		n += 2
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBookedAppointments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BookedAppointment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.BookedAppointment != nil {
		l = m.BookedAppointment.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBookedAppointment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBookedAppointmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.BookedAppointment != nil {
		l = m.BookedAppointment.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBookedAppointments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BookedAppointments) > 0 {
		for _, e := range m.BookedAppointments {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatientPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Amount != 0 {
		n += 5
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Ispaid {
		n += 2
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPaymentsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PatientPayment) > 0 {
		for _, e := range m.PatientPayment {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPaymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientToken)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ConsultationType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.VisitsCount != 0 {
		n += 1 + sovBookingService(uint64(m.VisitsCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Archive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientToken)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ConsultationType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.VisitsCount != 0 {
		n += 1 + sovBookingService(uint64(m.VisitsCount))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PatientToken)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.ConsultationType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BookedTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.VisitsCount != 0 {
		n += 1 + sovBookingService(uint64(m.VisitsCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Archives) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateArchiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Archive != nil {
		l = m.Archive.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUploadedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadedFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uploaded) > 0 {
		for _, e := range m.Uploaded {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdUploadedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.UploadedFile != nil {
		l = m.UploadedFile.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.NoteType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.NoteText)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.NoteType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.NoteText)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorNotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoctorNote) > 0 {
		for _, e := range m.DoctorNote {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdDoctorNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NoteType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.NoteText)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.DoctorNote != nil {
		l = m.DoctorNote.Size()
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBookingService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBookingService(x uint64) (n int) {
	return sovBookingService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPatientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPatientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPatientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPatientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPatientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPatientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePatientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePatientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePatientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Patient == nil {
				m.Patient = &PatientUpdate{}
			}
			if err := m.Patient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patient = append(m.Patient, &Patient{})
			if err := m.Patient[len(m.Patient)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePatientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePatientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePatientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDoctorAvailabilitys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDoctorAvailabilitys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDoctorAvailabilitys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorAvailabilitys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorAvailabilitys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorAvailabilitys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorAvailability = append(m.DoctorAvailability, &DoctorAvailability{})
			if err := m.DoctorAvailability[len(m.DoctorAvailability)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoctorAvailabilityById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoctorAvailabilityById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoctorAvailabilityById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorAvailabilityById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorAvailabilityById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorAvailabilityById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoctorAvailability == nil {
				m.DoctorAvailability = &UpdDoctorAvailability{}
			}
			if err := m.DoctorAvailability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdDoctorAvailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdDoctorAvailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdDoctorAvailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorAvailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorAvailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorAvailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBookedAppointments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBookedAppointments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBookedAppointments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookedAppointment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookedAppointment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookedAppointment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedAppointment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BookedAppointment == nil {
				m.BookedAppointment = &UpdateBookedAppointment{}
			}
			if err := m.BookedAppointment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBookedAppointment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBookedAppointment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBookedAppointment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBookedAppointmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBookedAppointmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBookedAppointmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedAppointment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BookedAppointment == nil {
				m.BookedAppointment = &UpdateBookedAppointment{}
			}
			if err := m.BookedAppointment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBookedAppointments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBookedAppointments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBookedAppointments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedAppointments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedAppointments = append(m.BookedAppointments, &BookedAppointment{})
			if err := m.BookedAppointments[len(m.BookedAppointments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ispaid = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientPayment = append(m.PatientPayment, &PatientPayment{})
			if err := m.PatientPayment[len(m.PatientPayment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &PatientPayment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsultationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsultationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitsCount", wireType)
			}
			m.VisitsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Archive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsultationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsultationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitsCount", wireType)
			}
			m.VisitsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsultationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsultationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitsCount", wireType)
			}
			m.VisitsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Archives) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archives: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archives: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &Archive{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArchiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArchiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArchiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archive == nil {
				m.Archive = &UpdArchive{}
			}
			if err := m.Archive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUploadedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUploadedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUploadedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadedFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadedFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadedFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploaded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploaded = append(m.Uploaded, &UploadedFile{})
			if err := m.Uploaded[len(m.Uploaded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdUploadedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdUploadedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdUploadedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadedFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadedFile == nil {
				m.UploadedFile = &UpdUploadedFile{}
			}
			if err := m.UploadedFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorNotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorNote = append(m.DoctorNote, &DoctorNote{})
			if err := m.DoctorNote[len(m.DoctorNote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdDoctorNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdDoctorNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdDoctorNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoctorNote == nil {
				m.DoctorNote = &UpdDoctorNote{}
			}
			if err := m.DoctorNote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBookingService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBookingService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBookingService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBookingService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBookingService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBookingService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBookingService = fmt.Errorf("proto: unexpected end of group")
)
